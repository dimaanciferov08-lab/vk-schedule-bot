import vk_api
import json
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
import sqlite3
import datetime
import time
import threading
import requests
from docx import Document
import io
import re
import logging
from urllib.parse import quote

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# üîë –ù–ê–°–¢–†–û–ô–ö–ò
CONFIG = {
    "group_id": 232761329,
    "token": "vk1.a.Y2xBv4alWQ55rd1IxtkpKc48ibKqpQ1x0Wyc9Hv0z18elxu3JaSBfCi7F5sJ9H4eKy1jg3iqFOjQTkQyCIYdnf77mcezdC__MLiyRi9Xwfus_uLz7UWd9AR8VPQDr7uMEiD1NxadTzqUllP7p4uqWixuefYkm6ryhgMbFLPSo-hnXKyt0XQ4qvpfIG5kLWlJoH7Ivew1yhgiKmtDWhbHYw",
    "admin_id": 238448950,
    "current_week": 1,
    "chat_id": None
}

# –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã
GROUP_LIST = {
    "1": "–ê–º–æ—Å–æ–≤ –ù–∏–∫–∏—Ç–∞", "2": "–ë–æ–≥–æ–º–æ–ª–æ–≤ –ì–µ–æ—Ä–≥–∏–π", "3": "–í–µ—Å–µ–ª–æ–≤ –î–∞–Ω–∏–∏–ª",
    "4": "–ì—Ä–æ–º–æ–≤ –†–æ–º–∞–Ω", "5": "–î–æ–ª–æ—Ç–∏–Ω –ò–≤–∞–Ω", "6": "–î—É–¥–∞—Ä–µ–≤ –°–≤—è—Ç–æ—Å–ª–∞–≤",
    "7": "–ó—É–µ–≤ –ê–Ω–¥—Ä–µ–π", "8": "–ò–≤–∞–Ω–æ–≤ –ú–∞—Ç–≤–µ–π", "9": "–ö–∞—Ä–ø–æ–≤ –î–º–∏—Ç—Ä–∏–π",
    "10": "–ö–ª–µ—â–µ–≤ –°–µ—Ä–≥–µ–π", "11": "–õ–µ–±–µ–¥–µ–≤ –ö–∏—Ä–∏–ª–ª", "12": "–ù–∞–∑–∞—Ä–µ–Ω–∫–æ–≤ –ò–≤–∞–Ω",
    "13": "–°–≤—è—Ç–µ—Ü –ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "14": "–°–µ–º–µ–Ω–æ–≤ –õ–µ–æ–Ω–∏–¥", "15": "–§–æ–º–∏—á–µ–≤–∞ –ï–ª–∏–∑–∞–≤–µ—Ç–∞",
    "16": "–®–µ–≤—á–µ–Ω–∫–æ –î–∞—Ä—å—è", "17": "–Ø—Ä–µ–º–µ–Ω–∫–æ –ê–Ω—Ç–æ–Ω"
}

# === –ö–õ–ê–°–° –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –†–ï–§–ï–†–ê–¢–û–í ===
class ReferatGenerator:
    def __init__(self):
        self.sources = []
    
    def clean_content(self, text):
        """–û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return ""
        text = re.sub(r'\s+', ' ', text)
        sentences = re.split(r'[.!?]+', text)
        sentences = [s.strip().capitalize() for s in sentences if len(s.strip()) > 20]
        return '. '.join(sentences) + '.' if sentences else ""
    
    def create_referat_structure(self, topic):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ—Ñ–µ—Ä–∞—Ç–∞"""
        structure = {
            'title': f'–†–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ —Ç–µ–º—É: "{topic}"',
            'subject': '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –û–±—â–∏–π –∫—É—Ä—Å',
            'student_info': '–í—ã–ø–æ–ª–Ω–∏–ª(–∞): —Å—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã',
            'introduction': self._generate_introduction(topic),
            'chapters': self._generate_chapters(topic),
            'conclusion': self._generate_conclusion(topic),
            'sources': self._generate_sources(),
            'appendix': self._generate_appendix(topic)
        }
        return structure
    
    def _generate_introduction(self, topic):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–∏—è"""
        return f"""–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º—ã '{topic}' –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –µ–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç—å—é –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞—É–∫–µ –∏ –ø—Ä–∞–∫—Ç–∏–∫–µ. 

–¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ - –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ "{topic}".

–ó–∞–¥–∞—á–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:
1. –ò–∑—É—á–∏—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã {topic.lower()}
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
3. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è

–û–±—ä–µ–∫—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è - {topic.lower()}
–ü—Ä–µ–¥–º–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è - –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ {topic.lower()}"""
    
    def _generate_chapters(self, topic):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–ª–∞–≤"""
        return [
            f"–ì–ª–∞–≤–∞ 1. –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º—ã\n–¢–µ–º–∞ '{topic}' –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞—É–∫–∏. –í –¥–∞–Ω–Ω–æ–π –≥–ª–∞–≤–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–∑—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏–∫–∏.",
            f"–ì–ª–∞–≤–∞ 2. –ê–Ω–∞–ª–∏–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤\n–í –¥–∞–Ω–Ω–æ–π –≥–ª–∞–≤–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –∏–∑—É—á–µ–Ω–∏—é {topic.lower()}. –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π."
        ]
    
    def _generate_conclusion(self, topic):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è"""
        return f"""–í —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ –Ω–∞ —Ç–µ–º—É "{topic}" –±—ã–ª–∏ —Ä–µ—à–µ–Ω—ã –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã:
1. –¢–µ–º–∞ –æ–±–ª–∞–¥–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
2. –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è

–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞–Ω–∏–π –∏ –≤—ã—è–≤–ª–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π."""
    
    def _generate_sources(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        return [
            "–í–∏–∫–∏–ø–µ–¥–∏—è - —Å–≤–æ–±–æ–¥–Ω–∞—è —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è",
            "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", 
            "–ù–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            "–£—á–µ–±–Ω–∏–∫–∏ –∏ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –ø–æ—Å–æ–±–∏—è"
        ]
    
    def _generate_appendix(self, topic):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        return f"""–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ê
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ "{topic}"

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
- –¢–∞–±–ª–∏—Ü—ã –∏ —Å—Ö–µ–º—ã
- –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã 
- –ò–ª–ª—é—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
- –†–∞—Å—á–µ—Ç—ã –∏ —Ñ–æ—Ä–º—É–ª—ã"""
    
    def create_word_document(self, referat_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            doc = Document()
            
            # –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            title = doc.add_heading(referat_data['title'], 0)
            title.alignment = 1
            
            doc.add_paragraph("\n" * 3)
            doc.add_paragraph(referat_data['subject'])
            doc.add_paragraph("\n" * 3)
            doc.add_paragraph(referat_data['student_info'])
            doc.add_paragraph("\n" * 3)
            doc.add_paragraph(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.datetime.now().strftime('%d.%m.%Y')}")
            
            doc.add_page_break()
            
            # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            doc.add_heading('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', level=1)
            doc.add_paragraph("–í–≤–µ–¥–µ–Ω–∏–µ")
            doc.add_paragraph("–ì–ª–∞–≤–∞ 1. –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º—ã") 
            doc.add_paragraph("–ì–ª–∞–≤–∞ 2. –ê–Ω–∞–ª–∏–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤")
            doc.add_paragraph("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ")
            doc.add_paragraph("–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            doc.add_paragraph("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            
            doc.add_page_break()
            
            # –í–≤–µ–¥–µ–Ω–∏–µ
            doc.add_heading('–í–≤–µ–¥–µ–Ω–∏–µ', level=1)
            doc.add_paragraph(referat_data['introduction'])
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –≥–ª–∞–≤—ã
            for chapter in referat_data['chapters']:
                doc.add_page_break()
                lines = chapter.split('\n')
                doc.add_heading(lines[0], level=1)
                doc.add_paragraph('\n'.join(lines[1:]))
            
            # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
            doc.add_page_break()
            doc.add_heading('–ó–∞–∫–ª—é—á–µ–Ω–∏–µ', level=1)
            doc.add_paragraph(referat_data['conclusion'])
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
            doc.add_page_break()
            doc.add_heading('–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤', level=1)
            for source in referat_data['sources']:
                doc.add_paragraph(source, style='List Bullet')
            
            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            doc.add_page_break()
            doc.add_heading('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', level=1)
            doc.add_paragraph(referat_data['appendix'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
            file_stream = io.BytesIO()
            doc.save(file_stream)
            file_stream.seek(0)
            
            return file_stream
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return None
    
    def generate_referat(self, topic):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞"""
        try:
            logging.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞: {topic}")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—Ñ–µ—Ä–∞—Ç–∞
            referat_structure = self.create_referat_structure(topic)
            
            if not referat_structure:
                return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—Ñ–µ—Ä–∞—Ç–∞"
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc_file = self.create_word_document(referat_structure)
            
            if not doc_file:
                return None, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            
            success_message = f"""‚úÖ –†–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ —Ç–µ–º—É '{topic}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üìä –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
‚Ä¢ –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ  
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–ª–∞–≤—ã
‚Ä¢ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

‚ö° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ª–∏—á–Ω—ã–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏
‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
            
            return doc_file, success_message
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞: {e}")
            return None, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞—Ç–æ–≤
referat_generator = ReferatGenerator()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    for week in range(1, 5):
        cursor.execute(f'''
            CREATE TABLE IF NOT EXISTS schedule_week{week} (
                id INTEGER PRIMARY KEY,
                data TEXT NOT NULL,
                last_updated TEXT NOT NULL,
                week_start_date TEXT NOT NULL
            )
        ''')
        cursor.execute(f"INSERT OR IGNORE INTO schedule_week{week} (id, data, last_updated, week_start_date) VALUES (1, '{{}}', '', '')")
    
    # –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reports_system (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            subject_name TEXT NOT NULL UNIQUE,
            report_data TEXT NOT NULL,
            max_reports_per_student INTEGER DEFAULT 1,
            created_by INTEGER NOT NULL,
            created_at TEXT NOT NULL,
            is_active BOOLEAN DEFAULT 1
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS student_registry (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL UNIQUE,
            student_number TEXT NOT NULL,
            student_name TEXT NOT NULL,
            registered_at TEXT NOT NULL
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS report_assignments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            subject_name TEXT NOT NULL,
            report_number INTEGER NOT NULL,
            report_title TEXT NOT NULL,
            assigned_at TEXT NOT NULL
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS admins (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL UNIQUE,
            added_by INTEGER NOT NULL,
            added_at TEXT NOT NULL
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    cursor.execute("SELECT 1 FROM admins WHERE user_id = ?", (CONFIG['admin_id'],))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO admins (user_id, added_by, added_at) VALUES (?, ?, ?)",
            (CONFIG['admin_id'], CONFIG['admin_id'], datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
    
    conn.commit()
    conn.close()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(peer_id, message, keyboard=None):
    try:
        params = {
            'peer_id': peer_id,
            'message': message,
            'random_id': get_random_id(),
        }
        if keyboard:
            params['keyboard'] = keyboard.get_keyboard() if hasattr(keyboard, 'get_keyboard') else keyboard
            
        result = vk_session.method('messages.send', params)
        print(f"‚úì –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message[:50]}...")
        return result
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤
def register_student(user_id, student_number):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    if student_number not in GROUP_LIST:
        conn.close()
        return False, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã!"
    
    student_name = GROUP_LIST[student_number]
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    try:
        cursor.execute(
            "INSERT OR REPLACE INTO student_registry (user_id, student_number, student_name, registered_at) VALUES (?, ?, ?, ?)",
            (user_id, student_number, student_name, current_time)
        )
        conn.commit()
        conn.close()
        return True, f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫: {student_number} - {student_name}"
    except Exception as e:
        conn.close()
        return False, f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}"

def get_student_info(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT student_number, student_name FROM student_registry WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    return result

def create_subject(subject_name, admin_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –¥–æ–∫–ª–∞–¥–æ–≤"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute("SELECT id FROM reports_system WHERE subject_name = ?", (subject_name,))
    if cursor.fetchone():
        conn.close()
        return False, "‚ùå –ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
    
    cursor.execute(
        "INSERT INTO reports_system (subject_name, report_data, created_by, created_at) VALUES (?, ?, ?, ?)",
        (subject_name, json.dumps({}), admin_id, current_time)
    )
    
    conn.commit()
    conn.close()
    return True, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"

def add_report_to_subject(subject_name, report_number, report_title, max_per_student, admin_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫–ª–∞–¥–∞ –∫ –ø—Ä–µ–¥–º–µ—Ç—É"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, report_data FROM reports_system WHERE subject_name = ?", (subject_name,))
    result = cursor.fetchone()
    
    if not result:
        conn.close()
        return False, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    
    subject_id, report_data_json = result
    report_data = json.loads(report_data_json)
    
    if str(report_number) in report_data:
        conn.close()
        return False, "‚ùå –î–æ–∫–ª–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
    
    report_data[str(report_number)] = {
        "title": report_title,
        "taken_by": None,
        "max_per_student": max_per_student
    }
    
    cursor.execute(
        "UPDATE reports_system SET report_data = ?, max_reports_per_student = ? WHERE id = ?",
        (json.dumps(report_data, ensure_ascii=False), max_per_student, subject_id)
    )
    
    conn.commit()
    conn.close()
    return True, f"‚úÖ –î–æ–∫–ª–∞–¥ #{report_number} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'"

def take_report_for_student(user_id, subject_name, report_number):
    """–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –¥–æ–∫–ª–∞–¥–∞ –∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    student_info = get_student_info(user_id)
    if not student_info:
        conn.close()
        return False, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ø [–≤–∞—à –Ω–æ–º–µ—Ä]'"
    
    student_number, student_name = student_info
    
    cursor.execute("SELECT report_data, max_reports_per_student FROM reports_system WHERE subject_name = ?", (subject_name,))
    result = cursor.fetchone()
    
    if not result:
        conn.close()
        return False, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    
    report_data_json, max_reports = result
    report_data = json.loads(report_data_json)
    
    if str(report_number) not in report_data:
        conn.close()
        return False, "‚ùå –î–æ–∫–ª–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    
    report_info = report_data[str(report_number)]
    
    if report_info["taken_by"]:
        conn.close()
        return False, "‚ùå –≠—Ç–æ—Ç –¥–æ–∫–ª–∞–¥ —É–∂–µ –∑–∞–Ω—è—Ç!"
    
    cursor.execute(
        "SELECT COUNT(*) FROM report_assignments WHERE user_id = ? AND subject_name = ?", 
        (user_id, subject_name)
    )
    current_count = cursor.fetchone()[0]
    
    if current_count >= max_reports:
        conn.close()
        return False, f"‚ùå –í—ã —É–∂–µ –≤–∑—è–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫–ª–∞–¥–æ–≤ ({max_reports}) –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É!"
    
    report_info["taken_by"] = student_number
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê - –±—ã–ª–∞ –æ–ø–µ—á–∞—Ç–∫–∞ referat_data –≤–º–µ—Å—Ç–æ report_data
    cursor.execute(
        "UPDATE reports_system SET report_data = ? WHERE subject_name = ?",
        (json.dumps(report_data, ensure_ascii=False), subject_name)
    )
    
    cursor.execute(
        "INSERT INTO report_assignments (user_id, subject_name, report_number, report_title, assigned_at) VALUES (?, ?, ?, ?, ?)",
        (user_id, subject_name, report_number, report_info["title"], current_time)
    )
    
    conn.commit()
    conn.close()
    return True, f"‚úÖ –î–æ–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –≤–∞–º–∏!\nüìö {subject_name}\nüìÑ –î–æ–∫–ª–∞–¥ #{report_number}: {report_info['title']}"

def get_subject_reports(subject_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫–ª–∞–¥–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT report_data FROM reports_system WHERE subject_name = ?", (subject_name,))
    result = cursor.fetchone()
    
    if not result:
        conn.close()
        return None
    
    report_data = json.loads(result[0])
    conn.close()
    return report_data

def get_student_reports(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫–ª–∞–¥–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT subject_name, report_number, report_title, assigned_at FROM report_assignments WHERE user_id = ? ORDER BY assigned_at DESC",
        (user_id,)
    )
    reports = cursor.fetchall()
    conn.close()
    return reports

def get_all_subjects():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT subject_name, max_reports_per_student FROM reports_system WHERE is_active = 1")
    subjects = cursor.fetchall()
    conn.close()
    return subjects

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT 1 FROM admins WHERE user_id = ?", (user_id,))
    result = cursor.fetchone() is not None
    conn.close()
    
    return result or user_id == CONFIG['admin_id']

def add_admin(new_admin_id, added_by):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    try:
        cursor.execute(
            "INSERT OR REPLACE INTO admins (user_id, added_by, added_at) VALUES (?, ?, ?)",
            (new_admin_id, added_by, current_time)
        )
        conn.commit()
        conn.close()
        return True, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    except Exception as e:
        conn.close()
        return False, f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def save_schedule(schedule_data, week_number=None):
    if week_number is None:
        week_number = CONFIG['current_week']
    
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    today = datetime.datetime.now()
    monday = today - datetime.timedelta(days=today.weekday())
    week_start = monday.strftime("%Y-%m-%d")
    
    table_name = f"schedule_week{week_number}"
    cursor.execute(f"UPDATE {table_name} SET data = ?, last_updated = ?, week_start_date = ? WHERE id = 1", 
                  (json.dumps(schedule_data, ensure_ascii=False), current_time, week_start))
    
    conn.commit()
    conn.close()
    return current_time

def load_schedule(week_number=None):
    if week_number is None:
        week_number = CONFIG['current_week']
    
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    table_name = f"schedule_week{week_number}"
    cursor.execute(f"SELECT data, last_updated FROM {table_name} WHERE id = 1")
    
    result = cursor.fetchone()
    conn.close()
    
    if result:
        data, last_updated = result
        return json.loads(data), last_updated
    return {}, ""

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π
days_of_week = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
days_of_week_capitalized = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_schedule_day(schedule_data, day_offset=0):
    if not schedule_data:
        return "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
    
    target_date = datetime.datetime.now() + datetime.timedelta(days=day_offset)
    day_name = days_of_week[target_date.weekday()]
    day_name_cap = days_of_week_capitalized[target_date.weekday()]
    
    response = f"üìÖ {day_name_cap}:\n"
    response += "‚îÄ" * 30 + "\n"
    
    if day_name in schedule_data and schedule_data[day_name]:
        for lesson in schedule_data[day_name]:
            response += f"üïí {lesson['pair']} –ø–∞—Ä–∞\n"
            response += f"üìö {lesson['subject']}\n"
            response += f"üë§ {lesson['teacher']}\n"
            response += f"üö™ {lesson['room']}\n\n"
    else:
        response += "üéâ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
    
    return response

def format_schedule_week(schedule_data, week_offset=0):
    if not schedule_data:
        return "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
    
    response = ""
    today = datetime.datetime.now()
    
    for i, day_name in enumerate(days_of_week):
        day_date = today + datetime.timedelta(days=i - today.weekday() + (week_offset * 7))
        day_name_cap = days_of_week_capitalized[i]
        
        response += f"üìÖ {day_name_cap}:\n"
        response += "‚îÄ" * 30 + "\n"
        
        if day_name in schedule_data and schedule_data[day_name]:
            for lesson in schedule_data[day_name]:
                response += f"üïí {lesson['pair']} –ø–∞—Ä–∞: {lesson['subject']}\n"
        else:
            response += "üéâ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"
        response += "\n"
    
    return response

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
def send_document(peer_id, file_stream, filename, message=""):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        upload_url = vk_session.method('docs.getMessagesUploadServer', {
            'type': 'doc',
            'peer_id': peer_id
        })['upload_url']
        
        files = {'file': (filename, file_stream)}
        response = requests.post(upload_url, files=files)
        result = response.json()
        
        doc = vk_session.method('docs.save', {
            'file': result['file'],
            'title': filename
        })[0]
        
        attachment = f"doc{doc['owner_id']}_{doc['id']}"
        
        vk_session.method('messages.send', {
            'peer_id': peer_id,
            'attachment': attachment,
            'message': message,
            'random_id': get_random_id()
        })
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
init_db()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK
try:
    print("üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ VK API...")
    vk_session = vk_api.VkApi(token=CONFIG['token'])
    vk = vk_session.get_api()
    
    group_info = vk.groups.getById(group_id=CONFIG['group_id'])
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥—Ä—É–ø–ø–µ: {group_info[0]['name']}")
    
    longpoll = VkBotLongPoll(vk_session, CONFIG['group_id'])
    print("‚úÖ LongPoll –∑–∞–ø—É—â–µ–Ω")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    exit()

print("üéØ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
for event in longpoll.listen():
    try:
        if event.type == VkBotEventType.MESSAGE_NEW:
            msg = event.object.message['text'].strip().lower()
            user_id = event.object.message['from_id']
            peer_id = event.object.message['peer_id']
            original_text = event.object.message['text']
            
            print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ: '{msg}' –æ—Ç {user_id}")
            
            if event.from_chat and CONFIG['chat_id'] is None:
                CONFIG['chat_id'] = peer_id
                print(f"üí¨ –ë–µ—Å–µ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {peer_id}")
            
            if event.from_chat:
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
                if msg.startswith('—è '):
                    parts = original_text[2:].strip().split()
                    if parts and parts[0].isdigit():
                        student_number = parts[0]
                        success, message = register_student(user_id, student_number)
                        send_message(peer_id, message)
                    else:
                        send_message(peer_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ø [–≤–∞—à –Ω–æ–º–µ—Ä]")
                
                # –î–æ–∫–ª–∞–¥—ã
                elif msg == '–¥–æ–∫–ª–∞–¥—ã':
                    subjects = get_all_subjects()
                    if subjects:
                        response = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –¥–æ–∫–ª–∞–¥–æ–≤:\n\n"
                        for subject_name, max_reports in subjects:
                            response += f"üìñ {subject_name} (–º–æ–∂–Ω–æ –≤–∑—è—Ç—å: {max_reports})\n"
                        response += "\nüéØ –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫–ª–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: '–î–æ–∫–ª–∞–¥—ã –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]'\nüìù –ß—Ç–æ–±—ã –≤–∑—è—Ç—å –¥–æ–∫–ª–∞–¥: '–ë–µ—Ä—É –¥–æ–∫–ª–∞–¥ [–Ω–æ–º–µ—Ä] –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]'"
                    else:
                        response = "üìö –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–æ–∫–ª–∞–¥–æ–≤"
                    send_message(peer_id, response)
                
                elif msg.startswith('–¥–æ–∫–ª–∞–¥—ã –ø–æ '):
                    subject_name = original_text[11:].strip()
                    reports = get_subject_reports(subject_name)
                    
                    if reports:
                        response = f"üìã –î–æ–∫–ª–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}':\n\n"
                        free_count = 0
                        
                        for report_num, report_info in sorted(reports.items(), key=lambda x: int(x[0])):
                            status = "‚úÖ –°–≤–æ–±–æ–¥–µ–Ω" if not report_info["taken_by"] else f"‚ùå –ó–∞–Ω—è—Ç ({GROUP_LIST.get(report_info['taken_by'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')})"
                            if not report_info["taken_by"]:
                                free_count += 1
                            
                            response += f"üìÑ {report_num}. {report_info['title'][:50]}...\n"
                            response += f"   {status}\n\n"
                        
                        response += f"üìä –°–≤–æ–±–æ–¥–Ω–æ –¥–æ–∫–ª–∞–¥–æ–≤: {free_count}/{len(reports)}"
                    else:
                        response = f"‚ùå –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤ –Ω–µ–º –Ω–µ—Ç –¥–æ–∫–ª–∞–¥–æ–≤"
                    send_message(peer_id, response)
                
                elif msg.startswith('–±–µ—Ä—É –¥–æ–∫–ª–∞–¥ '):
                    try:
                        parts = original_text[12:].strip().split(' –ø–æ ')
                        if len(parts) == 2:
                            report_number = int(parts[0].strip())
                            subject_name = parts[1].strip()
                            
                            success, message = take_report_for_student(user_id, subject_name, report_number)
                            send_message(peer_id, message)
                        else:
                            send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: –ë–µ—Ä—É –¥–æ–∫–ª–∞–¥ [–Ω–æ–º–µ—Ä] –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]")
                    except ValueError:
                        send_message(peer_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–∫–ª–∞–¥–∞")
                    except Exception as e:
                        send_message(peer_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                
                elif msg == '–º–æ–∏ –¥–æ–∫–ª–∞–¥—ã':
                    student_info = get_student_info(user_id)
                    if not student_info:
                        send_message(peer_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ø [–≤–∞—à –Ω–æ–º–µ—Ä]'")
                    else:
                        student_number, student_name = student_info
                        reports = get_student_reports(user_id)
                        
                        if reports:
                            response = f"üìö –í–∞—à–∏ –¥–æ–∫–ª–∞–¥—ã ({student_number} - {student_name}):\n\n"
                            for subject, report_num, title, assigned_at in reports:
                                response += f"üìñ {subject}\n"
                                response += f"üìÑ –î–æ–∫–ª–∞–¥ #{report_num}: {title}\n"
                                response += f"üïê –í–∑—è—Ç–æ: {assigned_at}\n\n"
                        else:
                            response = "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∑—è—Ç—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤"
                        send_message(peer_id, response)
                
                # === –†–ï–§–ï–†–ê–¢–´ ===
                elif msg.startswith('—Ä–µ—Ñ–µ—Ä–∞—Ç '):
                    topic = original_text[8:].strip()
                    if not topic:
                        send_message(peer_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã '—Ä–µ—Ñ–µ—Ä–∞—Ç'")
                    elif len(topic) < 3:
                        send_message(peer_id, "‚ùå –¢–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
                    else:
                        send_message(peer_id, f"üìö –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ –Ω–∞ —Ç–µ–º—É: '{topic}'\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 10-20 —Å–µ–∫—É–Ω–¥...")
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞—Ç
                        doc_file, message = referat_generator.generate_referat(topic)
                        
                        if doc_file:
                            filename = f"–†–µ—Ñ–µ—Ä–∞—Ç_{topic.replace(' ', '_')[:30]}.docx"
                            if send_document(peer_id, doc_file, filename, message):
                                print(f"‚úÖ –†–µ—Ñ–µ—Ä–∞—Ç '{topic}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                            else:
                                send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                        else:
                            send_message(peer_id, message)
                
                elif msg == '—Ä–µ—Ñ–µ—Ä–∞—Ç –ø–æ–º–æ—â—å':
                    help_text = """
üìö –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞—Ç–æ–≤:

–ö–æ–º–∞–Ω–¥–∞: —Ä–µ—Ñ–µ—Ä–∞—Ç [—Ç–µ–º–∞]
–ü—Ä–∏–º–µ—Ä: —Ä–µ—Ñ–µ—Ä–∞—Ç –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç

‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ—Ñ–µ—Ä–∞—Ç–∞
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤ Word
‚Ä¢ –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–ª–∞–≤—ã —Å –≤–≤–µ–¥–µ–Ω–∏–µ–º –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º
‚Ä¢ –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

üìù –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –û–±—ä–µ–º: 5-10 —Å—Ç—Ä–∞–Ω–∏—Ü
‚Ä¢ –ì–æ—Ç–æ–≤—ã–π Word –¥–æ–∫—É–º–µ–Ω—Ç
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞

‚è± –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: 10-20 —Å–µ–∫—É–Ω–¥

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏ –¥–æ–ø–æ–ª–Ω—è–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
‚Ä¢ –£—Ç–æ—á–Ω—è–π—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                    """
                    send_message(peer_id, help_text)
                
                elif msg == '—Ä–µ—Ñ–µ—Ä–∞—Ç –ø—Ä–∏–º–µ—Ä—ã':
                    examples = """
üìã –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞—Ç–æ–≤:

üî¨ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏:
‚Ä¢ –ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞
‚Ä¢ –ì–µ–Ω–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏–º–∞—Ç–∞
‚Ä¢ –≠–≤–æ–ª—é—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞

üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—É–∫–∏:
‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
‚Ä¢ –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
‚Ä¢ –ù–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
‚Ä¢ –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞

üåç –ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–∞—É–∫–∏:
‚Ä¢ –î—Ä–µ–≤–Ω–∏–π –†–∏–º
‚Ä¢ –≠–ø–æ—Ö–∞ –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ú–∏—Ä–æ–≤—ã–µ —Ä–µ–ª–∏–≥–∏–∏
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ

üíº –≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –±–∏–∑–Ω–µ—Å:
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
‚Ä¢ –¶–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ
‚Ä¢ –ì–ª–æ–±–∞–ª–∏–∑–∞—Ü–∏—è

üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ä–µ—Ñ–µ—Ä–∞—Ç [—Ç–µ–º–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞]
                    """
                    send_message(peer_id, examples)
                
                # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                elif is_admin(user_id):
                    if msg.startswith('!—Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç '):
                        subject_name = original_text[16:].strip()
                        if subject_name:
                            success, message = create_subject(subject_name, user_id)
                            send_message(peer_id, message)
                        else:
                            send_message(peer_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
                    
                    elif msg.startswith('!–¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫–ª–∞–¥ '):
                        try:
                            parts = original_text[17:].strip().split(';')
                            if len(parts) >= 3:
                                subject_name = parts[0].strip()
                                report_number = int(parts[1].strip())
                                report_title = parts[2].strip()
                                max_per_student = int(parts[3]) if len(parts) > 3 else 1
                                
                                success, message = add_report_to_subject(subject_name, report_number, report_title, max_per_student, user_id)
                                send_message(peer_id, message)
                            else:
                                send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: !–¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫–ª–∞–¥ [–ø—Ä–µ–¥–º–µ—Ç];[–Ω–æ–º–µ—Ä];[–Ω–∞–∑–≤–∞–Ω–∏–µ];[–º–∞–∫—Å.–∫–æ–ª-–≤–æ]")
                        except ValueError:
                            send_message(peer_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª")
                        except Exception as e:
                            send_message(peer_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                    
                    elif msg.startswith('!–¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ '):
                        try:
                            new_admin_id = int(original_text[17:].strip())
                            success, message = add_admin(new_admin_id, user_id)
                            send_message(peer_id, message)
                        except ValueError:
                            send_message(peer_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
                # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                elif msg in ['—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '—Å–µ–≥–æ–¥–Ω—è']:
                    schedule, last_updated = load_schedule()
                    response = format_schedule_day(schedule, 0)
                    if last_updated:
                        response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                    send_message(peer_id, response)
                
                elif msg == '–∑–∞–≤—Ç—Ä–∞':
                    schedule, last_updated = load_schedule()
                    response = format_schedule_day(schedule, 1)
                    if last_updated:
                        response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                    send_message(peer_id, response)
                
                elif msg == '–Ω–µ–¥–µ–ª—è':
                    schedule, last_updated = load_schedule()
                    response = format_schedule_week(schedule, 0)
                    if last_updated:
                        response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                    send_message(peer_id, response)
                
                elif msg == '—Å–ª–µ–¥ –Ω–µ–¥–µ–ª—è':
                    next_week = (CONFIG['current_week'] % 4) + 1
                    schedule, last_updated = load_schedule(next_week)
                    response = f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è\n\n" + format_schedule_week(schedule, 1)
                    if last_updated:
                        response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                    send_message(peer_id, response)
                
                elif msg == '–ø–æ–º–æ—â—å':
                    help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:
‚Ä¢ "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" –∏–ª–∏ "—Å–µ–≥–æ–¥–Ω—è" - –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ "–∑–∞–≤—Ç—Ä–∞" - –Ω–∞ –∑–∞–≤—Ç—Ä–∞  
‚Ä¢ "–Ω–µ–¥–µ–ª—è" - –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
‚Ä¢ "—Å–ª–µ–¥ –Ω–µ–¥–µ–ª—è" - –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é

üìö –î–æ–∫–ª–∞–¥—ã:
‚Ä¢ "—è [–Ω–æ–º–µ—Ä]" - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–ø—Ä–∏–º–µ—Ä: "—è 1")
‚Ä¢ "–¥–æ–∫–ª–∞–¥—ã" - —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
‚Ä¢ "–º–æ–∏ –¥–æ–∫–ª–∞–¥—ã" - –º–æ–∏ –≤–∑—è—Ç—ã–µ –¥–æ–∫–ª–∞–¥—ã
‚Ä¢ "–¥–æ–∫–ª–∞–¥—ã –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]" - –¥–æ–∫–ª–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
‚Ä¢ "–±–µ—Ä—É –¥–æ–∫–ª–∞–¥ [–Ω–æ–º–µ—Ä] –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]" - –≤–∑—è—Ç—å –¥–æ–∫–ª–∞–¥

üìñ –†–µ—Ñ–µ—Ä–∞—Ç—ã:
‚Ä¢ "—Ä–µ—Ñ–µ—Ä–∞—Ç [—Ç–µ–º–∞]" - —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞—Ç
‚Ä¢ "—Ä–µ—Ñ–µ—Ä–∞—Ç –ø–æ–º–æ—â—å" - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞–º
‚Ä¢ "—Ä–µ—Ñ–µ—Ä–∞—Ç –ø—Ä–∏–º–µ—Ä—ã" - –ø—Ä–∏–º–µ—Ä—ã —Ç–µ–º

‚ö° –ü—Ä–æ—á–µ–µ:
‚Ä¢ "–ø—Ä–∏–≤–µ—Ç" - —Ç–µ—Å—Ç –±–æ—Ç–∞
‚Ä¢ "–ø–æ–º–æ—â—å" - —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫
                    """
                    send_message(peer_id, help_text)
                
                elif msg == '–ø—Ä–∏–≤–µ—Ç':
                    send_message(peer_id, 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –ù–∞–ø–∏—à–∏ "–ø–æ–º–æ—â—å" –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.')
                
                else:
                    send_message(peer_id, '‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏ "–ø–æ–º–æ—â—å" –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.')
                
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
