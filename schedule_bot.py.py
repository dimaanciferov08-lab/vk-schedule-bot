import vk_api
import json
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
import sqlite3
import datetime
import time
import threading
import requests
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import io
import re
import logging
import wikipediaapi
import random
import math

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# üîë –ù–ê–°–¢–†–û–ô–ö–ò
CONFIG = {
    "group_id": 232761329,
    "token": "vk1.a.Y2xBv4alWQ55rd1IxtkpKc48ibKqpQ1x0Wyc9Hv0z18elxu3JaSBfCi7F5sJ9H4eKy1jg3iqFOjQTkQyCIYdnf77mcezdC__MLiyRi9Xwfus_uLz7UWd9AR8VPQDr7uMEiD1NxadTzqUllP7p4uqWixuefYkm6ryhgMbFLPSo-hnXKyt0XQ4qvpfIG5kLWlJoH7Ivew1yhgiKmtDWhbHYw",
    "admin_id": 238448950,
    "current_week": 1,
    "chat_id": None
}

# –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã
GROUP_LIST = {
    "1": "–ê–º–æ—Å–æ–≤ –ù–∏–∫–∏—Ç–∞", "2": "–ë–æ–≥–æ–º–æ–ª–æ–≤ –ì–µ–æ—Ä–≥–∏–π", "3": "–í–µ—Å–µ–ª–æ–≤ –î–∞–Ω–∏–∏–ª",
    "4": "–ì—Ä–æ–º–æ–≤ –†–æ–º–∞–Ω", "5": "–î–æ–ª–æ—Ç–∏–Ω –ò–≤–∞–Ω", "6": "–î—É–¥–∞—Ä–µ–≤ –°–≤—è—Ç–æ—Å–ª–∞–≤",
    "7": "–ó—É–µ–≤ –ê–Ω–¥—Ä–µ–π", "8": "–ò–≤–∞–Ω–æ–≤ –ú–∞—Ç–≤–µ–π", "9": "–ö–∞—Ä–ø–æ–≤ –î–º–∏—Ç—Ä–∏–π",
    "10": "–ö–ª–µ—â–µ–≤ –°–µ—Ä–≥–µ–π", "11": "–õ–µ–±–µ–¥–µ–≤ –ö–∏—Ä–∏–ª–ª", "12": "–ù–∞–∑–∞—Ä–µ–Ω–∫–æ–≤ –ò–≤–∞–Ω",
    "13": "–°–≤—è—Ç–µ—Ü –ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "14": "–°–µ–º–µ–Ω–æ–≤ –õ–µ–æ–Ω–∏–¥", "15": "–§–æ–º–∏—á–µ–≤–∞ –ï–ª–∏–∑–∞–≤–µ—Ç–∞",
    "16": "–®–µ–≤—á–µ–Ω–∫–æ –î–∞—Ä—å—è", "17": "–Ø—Ä–µ–º–µ–Ω–∫–æ –ê–Ω—Ç–æ–Ω"
}

# === –ë–ò–ë–õ–ò–û–¢–ï–ö–ê –ó–ù–ê–ù–ò–ô ===
class KnowledgeBase:
    def __init__(self):
        self.subjects = {
            '–º–µ—Ö–∞–Ω–∏–∫–∞': {
                '—Ñ–æ—Ä–º—É–ª—ã': {
                    '–∫–∏–Ω–µ–º–∞—Ç–∏–∫–∞': [
                        'v = s/t (—Å–∫–æ—Ä–æ—Å—Ç—å)',
                        'a = (v - v‚ÇÄ)/t (—É—Å–∫–æ—Ä–µ–Ω–∏–µ)',
                        's = v‚ÇÄt + at¬≤/2 (–ø—É—Ç—å)',
                        'v¬≤ = v‚ÇÄ¬≤ + 2as'
                    ],
                    '–¥–∏–Ω–∞–º–∏–∫–∞': [
                        'F = ma (–≤—Ç–æ—Ä–æ–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞)',
                        'F‚ÇÅ = -F‚ÇÇ (—Ç—Ä–µ—Ç–∏–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞)',
                        'F_—Ç—Ä = ŒºN (—Å–∏–ª–∞ —Ç—Ä–µ–Ω–∏—è)',
                        'P = mg (–≤–µ—Å —Ç–µ–ª–∞)'
                    ],
                    '—ç–Ω–µ—Ä–≥–∏—è': [
                        'E_–∫–∏–Ω = mv¬≤/2',
                        'E_–ø–æ—Ç = mgh',
                        'A = Fs cos Œ± (—Ä–∞–±–æ—Ç–∞)',
                        'N = A/t (–º–æ—â–Ω–æ—Å—Ç—å)'
                    ]
                },
                '–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã': {
                    'g': 9.81,
                    'G': 6.67430e-11,
                    'œÄ': 3.14159
                }
            },
            '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': {
                '—Ñ–æ—Ä–º—É–ª—ã': {
                    '–∞–ª–≥–µ–±—Ä–∞': [
                        '(a + b)¬≤ = a¬≤ + 2ab + b¬≤',
                        'a¬≤ - b¬≤ = (a - b)(a + b)',
                        'ax¬≤ + bx + c = 0',
                        'x = (-b ¬± ‚àö(b¬≤ - 4ac))/2a'
                    ],
                    '–≥–µ–æ–º–µ—Ç—Ä–∏—è': [
                        'S_—Ç—Ä–µ—É–≥ = ¬Ωbh',
                        'S_–∫—Ä—É–≥–∞ = œÄr¬≤',
                        'V_—Å—Ñ–µ—Ä—ã = 4/3œÄr¬≥',
                        'V_—Ü–∏–ª–∏–Ω–¥—Ä–∞ = œÄr¬≤h'
                    ],
                    '—Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è': [
                        'sin¬≤Œ± + cos¬≤Œ± = 1',
                        'sin(Œ± ¬± Œ≤) = sinŒ± cosŒ≤ ¬± cosŒ± sinŒ≤',
                        'cos(Œ± ¬± Œ≤) = cosŒ± cosŒ≤ ‚àì sinŒ± sinŒ≤'
                    ]
                }
            },
            '—Ñ–∏–∑–∏–∫–∞': {
                '—Ñ–æ—Ä–º—É–ª—ã': {
                    '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ': [
                        'I = U/R (–∑–∞–∫–æ–Ω –û–º–∞)',
                        'P = UI (–º–æ—â–Ω–æ—Å—Ç—å)',
                        'Q = I¬≤Rt (—Ç–µ–ø–ª–æ—Ç–∞)',
                        'F = kq‚ÇÅq‚ÇÇ/r¬≤ (–∑–∞–∫–æ–Ω –ö—É–ª–æ–Ω–∞)'
                    ],
                    '–æ–ø—Ç–∏–∫–∞': [
                        'n = c/v (–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è)',
                        '1/f = 1/d + 1/f (—Ñ–æ—Ä–º—É–ª–∞ –ª–∏–Ω–∑—ã)',
                        'Œª = c/ŒΩ (–¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã)'
                    ]
                }
            }
        }
    
    def calculate_mechanics(self, task_type, params):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –º–µ—Ö–∞–Ω–∏–∫–µ"""
        try:
            if task_type == '—Å–∫–æ—Ä–æ—Å—Ç—å':
                if 's' in params and 't' in params:
                    return params['s'] / params['t']
            elif task_type == '—É—Å–∫–æ—Ä–µ–Ω–∏–µ':
                if 'v' in params and 'v0' in params and 't' in params:
                    return (params['v'] - params['v0']) / params['t']
            elif task_type == '—Å–∏–ª–∞':
                if 'm' in params and 'a' in params:
                    return params['m'] * params['a']
            elif task_type == '—ç–Ω–µ—Ä–≥–∏—è_–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è':
                if 'm' in params and 'v' in params:
                    return 0.5 * params['m'] * params['v']**2
            elif task_type == '—ç–Ω–µ—Ä–≥–∏—è_–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è':
                if 'm' in params and 'h' in params:
                    return params['m'] * 9.81 * params['h']
            return None
        except:
            return None
    
    def get_formulas(self, subject, topic):
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º—É–ª—ã –ø–æ —Ç–µ–º–µ"""
        if subject in self.subjects and topic in self.subjects[subject]['—Ñ–æ—Ä–º—É–ª—ã']:
            return self.subjects[subject]['—Ñ–æ—Ä–º—É–ª—ã'][topic]
        return []

# === –£–õ–£–ß–®–ï–ù–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –†–ï–§–ï–†–ê–¢–û–í –ò –î–û–ö–õ–ê–î–û–í ===
class AdvancedReferatGenerator:
    def __init__(self):
        self.wiki_wiki = wikipediaapi.Wikipedia(
            language='ru',
            extract_format=wikipediaapi.ExtractFormat.WIKI,
            user_agent="VKStudentBot/1.0"
        )
        self.knowledge_base = KnowledgeBase()
    
    def search_wikipedia(self, topic):
        """–ü–æ–∏—Å–∫ –≤ Wikipedia"""
        try:
            page = self.wiki_wiki.page(topic)
            if page.exists():
                return {
                    'title': page.title,
                    'content': page.text[:5000],
                    'url': page.fullurl,
                    'exists': True
                }
            return {'exists': False}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ Wikipedia: {e}")
            return {'exists': False}
    
    def generate_extended_content(self, topic, pages=5):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–∞–Ω–∏—Ü"""
        # –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Wikipedia
        wiki_data = self.search_wikipedia(topic)
        
        if pages <= 3:
            # –ö–æ—Ä–æ—Ç–∫–∏–π –¥–æ–∫–ª–∞–¥ (3-5 —Å—Ç—Ä–∞–Ω–∏—Ü)
            chapters_count = 2
            subsections_per_chapter = 2
        elif pages <= 8:
            # –°—Ä–µ–¥–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞—Ç (6-8 —Å—Ç—Ä–∞–Ω–∏—Ü)
            chapters_count = 3
            subsections_per_chapter = 3
        else:
            # –ë–æ–ª—å—à–∞—è —Ä–∞–±–æ—Ç–∞ (9+ —Å—Ç—Ä–∞–Ω–∏—Ü)
            chapters_count = 4
            subsections_per_chapter = 4
        
        chapters = []
        
        for i in range(chapters_count):
            chapter = {
                'title': self._generate_chapter_title(topic, i),
                'subsections': []
            }
            
            for j in range(subsections_per_chapter):
                subsection = {
                    'title': self._generate_subsection_title(topic, i, j),
                    'content': self._generate_subsection_content(topic, i, j, wiki_data)
                }
                chapter['subsections'].append(subsection)
            
            chapters.append(chapter)
        
        return chapters
    
    def _generate_chapter_title(self, topic, chapter_num):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–ª–∞–≤—ã"""
        titles = [
            f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –∏–∑—É—á–µ–Ω–∏—è {topic}",
            f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ {topic}",
            f"–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é {topic}",
            f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {topic}",
            f"–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è {topic}",
            f"–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π {topic}"
        ]
        return titles[chapter_num % len(titles)]
    
    def _generate_subsection_title(self, topic, chapter_num, subsection_num):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞"""
        prefixes = [
            "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
            "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏", 
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
            "–ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
            "–ú–µ—Ç–æ–¥—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã",
            "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã",
            "–ê–Ω–∞–ª–∏–∑ –ø–æ–¥—Ö–æ–¥–æ–≤"
        ]
        return f"{subsection_num + 1}.{chapter_num + 1} {prefixes[(chapter_num + subsection_num) % len(prefixes)]}"
    
    def _generate_subsection_content(self, topic, chapter_num, subsection_num, wiki_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞"""
        base_content = ""
        if wiki_data.get('exists'):
            sentences = wiki_data['content'].split('. ')
            if sentences:
                base_content = '. '.join(sentences[:3]) + '. '
        
        templates = [
            f"–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –∞—Å–ø–µ–∫—Ç {topic} –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –¥–ª—è –Ω–∞—É—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. {base_content}",
            f"–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è {topic} –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—è–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏. {base_content}",
            f"–ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ {topic} —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—é –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤. {base_content}",
            f"–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—Å–ø–µ–∫—Ç–æ–≤ {topic} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å. {base_content}"
        ]
        
        return templates[(chapter_num + subsection_num) % len(templates)]
    
    def create_document_structure(self, topic, doc_type="—Ä–µ—Ñ–µ—Ä–∞—Ç", pages=5):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        
        chapters = self.generate_extended_content(topic, pages)
        
        if doc_type == "–¥–æ–∫–ª–∞–¥":
            doc_title = f"–î–æ–∫–ª–∞–¥ –Ω–∞ —Ç–µ–º—É: '{topic}'"
            doc_subject = "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å"
        else:
            doc_title = f"–†–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ —Ç–µ–º—É: '{topic}'"
            doc_subject = "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –û–±—â–∏–π –∫—É—Ä—Å"
        
        structure = {
            'title': doc_title,
            'subject': doc_subject,
            'student_info': '–í—ã–ø–æ–ª–Ω–∏–ª(–∞): —Å—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã',
            'type': doc_type,
            'pages': pages,
            'introduction': self._generate_introduction(topic, doc_type, pages),
            'chapters': chapters,
            'conclusion': self._generate_conclusion(topic, doc_type),
            'sources': self._generate_sources(topic),
            'appendix': self._generate_appendix(topic)
        }
        
        return structure
    
    def _generate_introduction(self, topic, doc_type, pages):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–∏—è"""
        return f"""–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º—ã '{topic}' –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –µ–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç—å—é –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞—É–∫–µ –∏ –ø—Ä–∞–∫—Ç–∏–∫–µ. 

–¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ {doc_type} - –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ "{topic}".

–ó–∞–¥–∞—á–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:
1. –ò–∑—É—á–∏—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã {topic.lower()}
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏  
3. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è
4. –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–û–±—ä–µ–º —Ä–∞–±–æ—Ç—ã: {pages} —Å—Ç—Ä–∞–Ω–∏—Ü
–ú–µ—Ç–æ–¥—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: –∞–Ω–∞–ª–∏–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    
    def _generate_conclusion(self, topic, doc_type):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è"""
        return f"""–í —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {doc_type} –Ω–∞ —Ç–µ–º—É "{topic}" –±—ã–ª–∏ —Ä–µ—à–µ–Ω—ã –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã:
1. –¢–µ–º–∞ '{topic}' –æ–±–ª–∞–¥–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
2. –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è  
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞–Ω–∏–π

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ–º—ã
- –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
- –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é"""
    
    def _generate_sources(self, topic):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        return [
            "–≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–µ –∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –∏–∑–¥–∞–Ω–∏—è",
            "–ù–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∏–∑–¥–∞–Ω–∏—è", 
            "–£—á–µ–±–Ω–∏–∫–∏ –∏ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –ø–æ—Å–æ–±–∏—è",
            "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å—ã –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã",
            "–ú–æ–Ω–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –Ω–∞—É—á–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            f"Wikipedia - {topic}"
        ]
    
    def _generate_appendix(self, topic):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        return f"""–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ê
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ "{topic}"

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
- –¢–∞–±–ª–∏—Ü—ã –∏ —Å—Ö–µ–º—ã
- –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã 
- –ò–ª–ª—é—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
- –†–∞—Å—á–µ—Ç—ã –∏ —Ñ–æ—Ä–º—É–ª—ã
- –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ë
–ì–ª–æ—Å—Å–∞—Ä–∏–π –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤

–î–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–π."""
    
    def create_word_document(self, doc_structure):
        """–°–æ–∑–¥–∞–Ω–∏–µ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            doc = Document()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
            style = doc.styles['Normal']
            style.font.name = 'Times New Roman'
            style.font.size = Pt(14)
            
            # –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            title = doc.add_heading(doc_structure['title'], 0)
            title.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            doc.add_paragraph("\n" * 4)
            doc.add_paragraph(doc_structure['subject']).alignment = WD_ALIGN_PARAGRAPH.CENTER
            doc.add_paragraph("\n" * 3)
            doc.add_paragraph(doc_structure['student_info']).alignment = WD_ALIGN_PARAGRAPH.CENTER
            doc.add_paragraph("\n" * 3)
            date_para = doc.add_paragraph(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.datetime.now().strftime('%d.%m.%Y')}")
            date_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            doc.add_page_break()
            
            # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            title = doc.add_heading('–°–û–î–ï–†–ñ–ê–ù–ò–ï', level=1)
            title.alignment = WD_ALIGN_PARAGRAPH.CENTER
            doc.add_paragraph()
            doc.add_paragraph("–í–≤–µ–¥–µ–Ω–∏–µ")
            
            for i, chapter in enumerate(doc_structure['chapters']):
                doc.add_paragraph(f"–ì–ª–∞–≤–∞ {i+1}. {chapter['title']}")
                for j, subsection in enumerate(chapter['subsections']):
                    doc.add_paragraph(f"   {subsection['title']}")
            
            doc.add_paragraph("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ")
            doc.add_paragraph("–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            doc.add_paragraph("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            
            doc.add_page_break()
            
            # –í–≤–µ–¥–µ–Ω–∏–µ
            doc.add_heading('–í–í–ï–î–ï–ù–ò–ï', level=1)
            for paragraph in doc_structure['introduction'].split('\n\n'):
                if paragraph.strip():
                    p = doc.add_paragraph(paragraph)
                    p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –≥–ª–∞–≤—ã
            for i, chapter in enumerate(doc_structure['chapters']):
                doc.add_page_break()
                doc.add_heading(f'–ì–õ–ê–í–ê {i+1}. {chapter["title"].upper()}', level=1)
                
                for subsection in chapter['subsections']:
                    doc.add_heading(subsection['title'], level=2)
                    p = doc.add_paragraph(subsection['content'])
                    p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
                    doc.add_paragraph()
            
            # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
            doc.add_page_break()
            doc.add_heading('–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï', level=1)
            for paragraph in doc_structure['conclusion'].split('\n\n'):
                if paragraph.strip():
                    p = doc.add_paragraph(paragraph)
                    p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
            doc.add_page_break()
            doc.add_heading('–°–ü–ò–°–û–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–• –ò–°–¢–û–ß–ù–ò–ö–û–í', level=1)
            for source in doc_structure['sources']:
                p = doc.add_paragraph(source, style='List Bullet')
                p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
            
            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            doc.add_page_break()
            doc.add_heading('–ü–†–ò–õ–û–ñ–ï–ù–ò–ï', level=1)
            p = doc.add_paragraph(doc_structure['appendix'])
            p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
            file_stream = io.BytesIO()
            doc.save(file_stream)
            file_stream.seek(0)
            
            return file_stream
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return None
    
    def generate_document(self, topic, doc_type="—Ä–µ—Ñ–µ—Ä–∞—Ç", pages=5):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            logging.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {doc_type}: {topic}, {pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_structure = self.create_document_structure(topic, doc_type, pages)
            
            if not doc_structure:
                return None, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É {doc_type}"
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc_file = self.create_word_document(doc_structure)
            
            if not doc_file:
                return None, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            
            success_message = f"""‚úÖ {doc_type.capitalize()} –Ω–∞ —Ç–µ–º—É '{topic}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ –¢–∏–ø: {doc_type.capitalize()}
‚Ä¢ –û–±—ä–µ–º: {pages} —Å—Ç—Ä–∞–Ω–∏—Ü
‚Ä¢ –ì–ª–∞–≤: {len(doc_structure['chapters'])}
‚Ä¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤: {sum(len(ch['subsections']) for ch in doc_structure['chapters'])}

üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
‚Ä¢ –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
‚Ä¢ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏–º–µ—Ä–∞–º–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
            
            return doc_file, success_message
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {doc_type}: {e}")
            return None, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {doc_type}"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
advanced_generator = AdvancedReferatGenerator()
knowledge_base = KnowledgeBase()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    for week in range(1, 5):
        cursor.execute(f'''
            CREATE TABLE IF NOT EXISTS schedule_week{week} (
                id INTEGER PRIMARY KEY,
                data TEXT NOT NULL,
                last_updated TEXT NOT NULL,
                week_start_date TEXT NOT NULL
            )
        ''')
        cursor.execute(f"INSERT OR IGNORE INTO schedule_week{week} (id, data, last_updated, week_start_date) VALUES (1, '{{}}', '', '')")
    
    # –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reports_system (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            subject_name TEXT NOT NULL UNIQUE,
            report_data TEXT NOT NULL,
            max_reports_per_student INTEGER DEFAULT 1,
            created_by INTEGER NOT NULL,
            created_at TEXT NOT NULL,
            is_active BOOLEAN DEFAULT 1
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS student_registry (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL UNIQUE,
            student_number TEXT NOT NULL,
            student_name TEXT NOT NULL,
            registered_at TEXT NOT NULL
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS report_assignments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            subject_name TEXT NOT NULL,
            report_number INTEGER NOT NULL,
            report_title TEXT NOT NULL,
            assigned_at TEXT NOT NULL
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS admins (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL UNIQUE,
            added_by INTEGER NOT NULL,
            added_at TEXT NOT NULL
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    cursor.execute("SELECT 1 FROM admins WHERE user_id = ?", (CONFIG['admin_id'],))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO admins (user_id, added_by, added_at) VALUES (?, ?, ?)",
            (CONFIG['admin_id'], CONFIG['admin_id'], datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(peer_id, message, keyboard=None):
    try:
        params = {
            'peer_id': peer_id,
            'message': message,
            'random_id': get_random_id(),
        }
        if keyboard:
            params['keyboard'] = keyboard.get_keyboard() if hasattr(keyboard, 'get_keyboard') else keyboard
            
        result = vk_session.method('messages.send', params)
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message[:50]}...")
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤
def register_student(user_id, student_number):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    if student_number not in GROUP_LIST:
        conn.close()
        return False, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã!"
    
    student_name = GROUP_LIST[student_number]
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    try:
        cursor.execute(
            "INSERT OR REPLACE INTO student_registry (user_id, student_number, student_name, registered_at) VALUES (?, ?, ?, ?)",
            (user_id, student_number, student_name, current_time)
        )
        conn.commit()
        conn.close()
        return True, f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫: {student_number} - {student_name}"
    except Exception as e:
        conn.close()
        return False, f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}"

def get_student_info(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT student_number, student_name FROM student_registry WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    return result

def create_subject(subject_name, admin_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –¥–æ–∫–ª–∞–¥–æ–≤"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute("SELECT id FROM reports_system WHERE subject_name = ?", (subject_name,))
    if cursor.fetchone():
        conn.close()
        return False, "‚ùå –ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
    
    cursor.execute(
        "INSERT INTO reports_system (subject_name, report_data, created_by, created_at) VALUES (?, ?, ?, ?)",
        (subject_name, json.dumps({}), admin_id, current_time)
    )
    
    conn.commit()
    conn.close()
    return True, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"

def add_report_to_subject(subject_name, report_number, report_title, max_per_student, admin_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫–ª–∞–¥–∞ –∫ –ø—Ä–µ–¥–º–µ—Ç—É"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, report_data FROM reports_system WHERE subject_name = ?", (subject_name,))
    result = cursor.fetchone()
    
    if not result:
        conn.close()
        return False, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    
    subject_id, report_data_json = result
    report_data = json.loads(report_data_json)
    
    if str(report_number) in report_data:
        conn.close()
        return False, "‚ùå –î–æ–∫–ª–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
    
    report_data[str(report_number)] = {
        "title": report_title,
        "taken_by": None,
        "max_per_student": max_per_student
    }
    
    cursor.execute(
        "UPDATE reports_system SET report_data = ?, max_reports_per_student = ? WHERE id = ?",
        (json.dumps(report_data, ensure_ascii=False), max_per_student, subject_id)
    )
    
    conn.commit()
    conn.close()
    return True, f"‚úÖ –î–æ–∫–ª–∞–¥ #{report_number} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}'"

def take_report_for_student(user_id, subject_name, report_number):
    """–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –¥–æ–∫–ª–∞–¥–∞ –∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    student_info = get_student_info(user_id)
    if not student_info:
        conn.close()
        return False, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ø [–≤–∞—à –Ω–æ–º–µ—Ä]'"
    
    student_number, student_name = student_info
    
    cursor.execute("SELECT report_data, max_reports_per_student FROM reports_system WHERE subject_name = ?", (subject_name,))
    result = cursor.fetchone()
    
    if not result:
        conn.close()
        return False, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    
    report_data_json, max_reports = result
    report_data = json.loads(report_data_json)
    
    if str(report_number) not in report_data:
        conn.close()
        return False, "‚ùå –î–æ–∫–ª–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    
    report_info = report_data[str(report_number)]
    
    if report_info["taken_by"]:
        conn.close()
        return False, "‚ùå –≠—Ç–æ—Ç –¥–æ–∫–ª–∞–¥ —É–∂–µ –∑–∞–Ω—è—Ç!"
    
    cursor.execute(
        "SELECT COUNT(*) FROM report_assignments WHERE user_id = ? AND subject_name = ?", 
        (user_id, subject_name)
    )
    current_count = cursor.fetchone()[0]
    
    if current_count >= max_reports:
        conn.close()
        return False, f"‚ùå –í—ã —É–∂–µ –≤–∑—è–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫–ª–∞–¥–æ–≤ ({max_reports}) –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É!"
    
    report_info["taken_by"] = student_number
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
    cursor.execute(
        "UPDATE reports_system SET report_data = ? WHERE subject_name = ?",
        (json.dumps(report_data, ensure_ascii=False), subject_name)
    )
    
    cursor.execute(
        "INSERT INTO report_assignments (user_id, subject_name, report_number, report_title, assigned_at) VALUES (?, ?, ?, ?, ?)",
        (user_id, subject_name, report_number, report_info["title"], current_time)
    )
    
    conn.commit()
    conn.close()
    return True, f"‚úÖ –î–æ–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –≤–∞–º–∏!\nüìö {subject_name}\nüìÑ –î–æ–∫–ª–∞–¥ #{report_number}: {report_info['title']}"

def get_subject_reports(subject_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫–ª–∞–¥–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT report_data FROM reports_system WHERE subject_name = ?", (subject_name,))
    result = cursor.fetchone()
    
    if not result:
        conn.close()
        return None
    
    report_data = json.loads(result[0])
    conn.close()
    return report_data

def get_student_reports(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫–ª–∞–¥–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT subject_name, report_number, report_title, assigned_at FROM report_assignments WHERE user_id = ? ORDER BY assigned_at DESC",
        (user_id,)
    )
    reports = cursor.fetchall()
    conn.close()
    return reports

def get_all_subjects():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT subject_name, max_reports_per_student FROM reports_system WHERE is_active = 1")
    subjects = cursor.fetchall()
    conn.close()
    return subjects

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT 1 FROM admins WHERE user_id = ?", (user_id,))
    result = cursor.fetchone() is not None
    conn.close()
    
    return result or user_id == CONFIG['admin_id']

def add_admin(new_admin_id, added_by):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    try:
        cursor.execute(
            "INSERT OR REPLACE INTO admins (user_id, added_by, added_at) VALUES (?, ?, ?)",
            (new_admin_id, added_by, current_time)
        )
        conn.commit()
        conn.close()
        return True, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    except Exception as e:
        conn.close()
        return False, f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def save_schedule(schedule_data, week_number=None):
    if week_number is None:
        week_number = CONFIG['current_week']
    
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    today = datetime.datetime.now()
    monday = today - datetime.timedelta(days=today.weekday())
    week_start = monday.strftime("%Y-%m-%d")
    
    table_name = f"schedule_week{week_number}"
    cursor.execute(f"UPDATE {table_name} SET data = ?, last_updated = ?, week_start_date = ? WHERE id = 1", 
                  (json.dumps(schedule_data, ensure_ascii=False), current_time, week_start))
    
    conn.commit()
    conn.close()
    return current_time

def load_schedule(week_number=None):
    if week_number is None:
        week_number = CONFIG['current_week']
    
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    table_name = f"schedule_week{week_number}"
    cursor.execute(f"SELECT data, last_updated FROM {table_name} WHERE id = 1")
    
    result = cursor.fetchone()
    conn.close()
    
    if result:
        data, last_updated = result
        return json.loads(data), last_updated
    return {}, ""

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π
days_of_week = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
days_of_week_capitalized = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_schedule_day(schedule_data, day_offset=0):
    if not schedule_data:
        return "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
    
    target_date = datetime.datetime.now() + datetime.timedelta(days=day_offset)
    day_name = days_of_week[target_date.weekday()]
    day_name_cap = days_of_week_capitalized[target_date.weekday()]
    
    response = f"üìÖ {day_name_cap}:\n"
    response += "‚îÄ" * 30 + "\n"
    
    if day_name in schedule_data and schedule_data[day_name]:
        for lesson in schedule_data[day_name]:
            response += f"üïí {lesson['pair']} –ø–∞—Ä–∞\n"
            response += f"üìö {lesson['subject']}\n"
            response += f"üë§ {lesson['teacher']}\n"
            response += f"üö™ {lesson['room']}\n\n"
    else:
        response += "üéâ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
    
    return response

def format_schedule_week(schedule_data, week_offset=0):
    if not schedule_data:
        return "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
    
    response = ""
    today = datetime.datetime.now()
    
    for i, day_name in enumerate(days_of_week):
        day_date = today + datetime.timedelta(days=i - today.weekday() + (week_offset * 7))
        day_name_cap = days_of_week_capitalized[i]
        
        response += f"üìÖ {day_name_cap}:\n"
        response += "‚îÄ" * 30 + "\n"
        
        if day_name in schedule_data and schedule_data[day_name]:
            for lesson in schedule_data[day_name]:
                response += f"üïí {lesson['pair']} –ø–∞—Ä–∞: {lesson['subject']}\n"
        else:
            response += "üéâ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"
        response += "\n"
    
    return response

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
def send_document(peer_id, file_stream, filename, message=""):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        print(f"üì§ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞: {filename}")
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        upload_data = vk_session.method('docs.getMessagesUploadServer', {
            'type': 'doc',
            'peer_id': peer_id
        })
        
        upload_url = upload_data['upload_url']
        print(f"üì§ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—É—á–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        files = {'file': (filename, file_stream.getvalue())}
        response = requests.post(upload_url, files=files, timeout=30)
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.status_code}")
            return False
            
        result = response.json()
        print(f"üì§ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {result}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨
        doc_data = vk_session.method('docs.save', {
            'file': result['file'],
            'title': filename,
            'tags': '—Ä–µ—Ñ–µ—Ä–∞—Ç'
        })
        
        print(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç docs.save: {doc_data}")
        
        if not doc_data:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return False
            
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: docs.save –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º 'doc', –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
        if 'doc' in doc_data:
            doc = doc_data['doc']
            attachment = f"doc{doc['owner_id']}_{doc['id']}"
        elif 'type' in doc_data and doc_data['type'] == 'doc':
            doc = doc_data['doc']
            attachment = f"doc{doc['owner_id']}_{doc['id']}"
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {doc_data}")
            return False
            
        print(f"üì§ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {attachment}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        send_result = vk_session.method('messages.send', {
            'peer_id': peer_id,
            'attachment': attachment,
            'message': message,
            'random_id': get_random_id()
        })
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {send_result}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
init_db()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK
try:
    print("üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ VK API...")
    vk_session = vk_api.VkApi(token=CONFIG['token'])
    vk = vk_session.get_api()
    
    group_info = vk.groups.getById(group_id=CONFIG['group_id'])
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥—Ä—É–ø–ø–µ: {group_info[0]['name']}")
    
    longpoll = VkBotLongPoll(vk_session, CONFIG['group_id'])
    print("‚úÖ LongPoll –∑–∞–ø—É—â–µ–Ω")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    exit()

print("üéØ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
for event in longpoll.listen():
    try:
        if event.type == VkBotEventType.MESSAGE_NEW:
            msg = event.object.message['text'].strip().lower()
            user_id = event.object.message['from_id']
            peer_id = event.object.message['peer_id']
            original_text = event.object.message['text']
            
            print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ: '{msg}' –æ—Ç {user_id}")
            
            if event.from_chat and CONFIG['chat_id'] is None:
                CONFIG['chat_id'] = peer_id
                print(f"üí¨ –ë–µ—Å–µ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {peer_id}")
            
            if event.from_chat:
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
                if msg.startswith('—è '):
                    parts = original_text[2:].strip().split()
                    if parts and parts[0].isdigit():
                        student_number = parts[0]
                        success, message = register_student(user_id, student_number)
                        send_message(peer_id, message)
                    else:
                        send_message(peer_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ø [–≤–∞—à –Ω–æ–º–µ—Ä]")
                
                # –î–æ–∫–ª–∞–¥—ã
                elif msg == '–¥–æ–∫–ª–∞–¥—ã':
                    subjects = get_all_subjects()
                    if subjects:
                        response = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –¥–æ–∫–ª–∞–¥–æ–≤:\n\n"
                        for subject_name, max_reports in subjects:
                            response += f"üìñ {subject_name} (–º–æ–∂–Ω–æ –≤–∑—è—Ç—å: {max_reports})\n"
                        response += "\nüéØ –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫–ª–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: '–î–æ–∫–ª–∞–¥—ã –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]'\nüìù –ß—Ç–æ–±—ã –≤–∑—è—Ç—å –¥–æ–∫–ª–∞–¥: '–ë–µ—Ä—É –¥–æ–∫–ª–∞–¥ [–Ω–æ–º–µ—Ä] –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]'"
                    else:
                        response = "üìö –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–æ–∫–ª–∞–¥–æ–≤"
                    send_message(peer_id, response)
                
                elif msg.startswith('–¥–æ–∫–ª–∞–¥—ã –ø–æ '):
                    subject_name = original_text[11:].strip()
                    reports = get_subject_reports(subject_name)
                    
                    if reports:
                        response = f"üìã –î–æ–∫–ª–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}':\n\n"
                        free_count = 0
                        
                        for report_num, report_info in sorted(reports.items(), key=lambda x: int(x[0])):
                            status = "‚úÖ –°–≤–æ–±–æ–¥–µ–Ω" if not report_info["taken_by"] else f"‚ùå –ó–∞–Ω—è—Ç ({GROUP_LIST.get(report_info['taken_by'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')})"
                            if not report_info["taken_by"]:
                                free_count += 1
                            
                            response += f"üìÑ {report_num}. {report_info['title'][:50]}...\n"
                            response += f"   {status}\n\n"
                        
                        response += f"üìä –°–≤–æ–±–æ–¥–Ω–æ –¥–æ–∫–ª–∞–¥–æ–≤: {free_count}/{len(reports)}"
                    else:
                        response = f"‚ùå –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤ –Ω–µ–º –Ω–µ—Ç –¥–æ–∫–ª–∞–¥–æ–≤"
                    send_message(peer_id, response)
                
                elif msg.startswith('–±–µ—Ä—É –¥–æ–∫–ª–∞–¥ '):
                    try:
                        parts = original_text[12:].strip().split(' –ø–æ ')
                        if len(parts) == 2:
                            report_number = int(parts[0].strip())
                            subject_name = parts[1].strip()
                            
                            success, message = take_report_for_student(user_id, subject_name, report_number)
                            send_message(peer_id, message)
                        else:
                            send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: –ë–µ—Ä—É –¥–æ–∫–ª–∞–¥ [–Ω–æ–º–µ—Ä] –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]")
                    except ValueError:
                        send_message(peer_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–∫–ª–∞–¥–∞")
                    except Exception as e:
                        send_message(peer_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                
                elif msg == '–º–æ–∏ –¥–æ–∫–ª–∞–¥—ã':
                    student_info = get_student_info(user_id)
                    if not student_info:
                        send_message(peer_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ø [–≤–∞—à –Ω–æ–º–µ—Ä]'")
                    else:
                        student_number, student_name = student_info
                        reports = get_student_reports(user_id)
                        
                        if reports:
                            response = f"üìö –í–∞—à–∏ –¥–æ–∫–ª–∞–¥—ã ({student_number} - {student_name}):\n\n"
                            for subject, report_num, title, assigned_at in reports:
                                response += f"üìñ {subject}\n"
                                response += f"üìÑ –î–æ–∫–ª–∞–¥ #{report_num}: {title}\n"
                                response += f"üïê –í–∑—è—Ç–æ: {assigned_at}\n\n"
                        else:
                            response = "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∑—è—Ç—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤"
                        send_message(peer_id, response)
                
                # === –†–ï–§–ï–†–ê–¢–´ ===
                elif msg.startswith('—Ä–µ—Ñ–µ—Ä–∞—Ç '):
                    topic = original_text[8:].strip()
                    if not topic:
                        send_message(peer_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã '—Ä–µ—Ñ–µ—Ä–∞—Ç'")
                    elif len(topic) < 3:
                        send_message(peer_id, "‚ùå –¢–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
                    else:
                        send_message(peer_id, f"üìö –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ –Ω–∞ —Ç–µ–º—É: '{topic}'\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 10-20 —Å–µ–∫—É–Ω–¥...")
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞—Ç
                        doc_file, message = advanced_generator.generate_document(topic, "—Ä–µ—Ñ–µ—Ä–∞—Ç", 5)
                        
                        if doc_file:
                            filename = f"–†–µ—Ñ–µ—Ä–∞—Ç_{topic.replace(' ', '_')[:20]}.docx"
                            if send_document(peer_id, doc_file, filename, message):
                                print(f"‚úÖ –†–µ—Ñ–µ—Ä–∞—Ç '{topic}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                            else:
                                send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                        else:
                            send_message(peer_id, message)
                
                # === –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´: –ú–ê–°–°–ò–í–ù–´–ï –î–û–ö–õ–ê–î–´ ===
                elif msg.startswith('–¥–æ–∫–ª–∞–¥ '):
                    parts = original_text[7:].strip().split(' —Å—Ç—Ä–∞–Ω–∏—Ü')
                    if len(parts) == 2:
                        topic = parts[0].strip()
                        try:
                            pages = int(parts[1].strip())
                            if pages < 1 or pages > 20:
                                send_message(peer_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –æ—Ç 1 –¥–æ 20 —Å—Ç—Ä–∞–Ω–∏—Ü")
                            else:
                                send_message(peer_id, f"üìö –°–æ–∑–¥–∞—é –¥–æ–∫–ª–∞–¥ –Ω–∞ —Ç–µ–º—É: '{topic}'\nüìÑ –û–±—ä–µ–º: {pages} —Å—Ç—Ä–∞–Ω–∏—Ü\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
                                doc_file, message = advanced_generator.generate_document(topic, "–¥–æ–∫–ª–∞–¥", pages)
                                if doc_file:
                                    filename = f"–î–æ–∫–ª–∞–¥_{topic.replace(' ', '_')[:20]}_{pages}—Å—Ç—Ä.docx"
                                    if send_document(peer_id, doc_file, filename, message):
                                        print(f"‚úÖ –î–æ–∫–ª–∞–¥ '{topic}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                                    else:
                                        send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                                else:
                                    send_message(peer_id, message)
                        except ValueError:
                            send_message(peer_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —á–∏—Å–ª–æ–º")
                    else:
                        send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: –¥–æ–∫–ª–∞–¥ [—Ç–µ–º–∞] —Å—Ç—Ä–∞–Ω–∏—Ü [—á–∏—Å–ª–æ]")
                
                # === –†–ê–°–ß–ï–¢–´ –ü–û –ú–ï–•–ê–ù–ò–ö–ï ===
                elif msg.startswith('—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å '):
                    parts = original_text[11:].strip().split()
                    if len(parts) >= 2:
                        subject = parts[0].lower()
                        task = ' '.join(parts[1:])
                        
                        if subject == '–º–µ—Ö–∞–Ω–∏–∫–∞':
                            # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–¥–∞—á–∏
                            params = {}
                            if '–º–∞—Å—Å' in task:
                                masses = re.findall(r'–º–∞—Å—Å[–∞—ã—É]? (\d+)', task)
                                if masses:
                                    params['m'] = float(masses[0])
                            if '—Å–∫–æ—Ä–æ—Å—Ç' in task:
                                speeds = re.findall(r'—Å–∫–æ—Ä–æ—Å—Ç[—å–∏]? (\d+)', task)
                                if speeds:
                                    params['v'] = float(speeds[0])
                            if '–≤—Ä–µ–º—è' in task:
                                times = re.findall(r'–≤—Ä–µ–º[—è–µ–Ω–∏]? (\d+)', task)
                                if times:
                                    params['t'] = float(times[0])
                            if '–≤—ã—Å–æ—Ç' in task:
                                heights = re.findall(r'–≤—ã—Å–æ—Ç[–∞—ã—É]? (\d+)', task)
                                if heights:
                                    params['h'] = float(heights[0])
                            
                            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
                            if '—É—Å–∫–æ—Ä–µ–Ω' in task:
                                result = knowledge_base.calculate_mechanics('—É—Å–∫–æ—Ä–µ–Ω–∏–µ', params)
                                if result:
                                    send_message(peer_id, f"üìê –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:\n–£—Å–∫–æ—Ä–µ–Ω–∏–µ = {result:.2f} –º/—Å¬≤")
                                else:
                                    send_message(peer_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è")
                            elif '—Å–∏–ª' in task:
                                result = knowledge_base.calculate_mechanics('—Å–∏–ª–∞', params)
                                if result:
                                    send_message(peer_id, f"üìê –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:\n–°–∏–ª–∞ = {result:.2f} –ù")
                                else:
                                    send_message(peer_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã")
                            elif '—ç–Ω–µ—Ä–≥–∏' in task and '–∫–∏–Ω–µ—Ç–∏—á' in task:
                                result = knowledge_base.calculate_mechanics('—ç–Ω–µ—Ä–≥–∏—è_–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è', params)
                                if result:
                                    send_message(peer_id, f"üìê –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:\n–ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è = {result:.2f} –î–∂")
                                else:
                                    send_message(peer_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —ç–Ω–µ—Ä–≥–∏–∏")
                            elif '—ç–Ω–µ—Ä–≥–∏' in task and '–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª' in task:
                                result = knowledge_base.calculate_mechanics('—ç–Ω–µ—Ä–≥–∏—è_–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è', params)
                                if result:
                                    send_message(peer_id, f"üìê –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:\n–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è = {result:.2f} –î–∂")
                                else:
                                    send_message(peer_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —ç–Ω–µ—Ä–≥–∏–∏")
                            else:
                                send_message(peer_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å: —É—Å–∫–æ—Ä–µ–Ω–∏–µ, —Å–∏–ª–∞, —ç–Ω–µ—Ä–≥–∏—è_–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è, —ç–Ω–µ—Ä–≥–∏—è_–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è")
                        else:
                            send_message(peer_id, "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: –º–µ—Ö–∞–Ω–∏–∫–∞")
                    else:
                        send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å [–ø—Ä–µ–¥–º–µ—Ç] [–∑–∞–¥–∞—á–∞]")
                
                # === –§–û–†–ú–£–õ–´ ===
                elif msg.startswith('—Ñ–æ—Ä–º—É–ª—ã '):
                    subject = original_text[8:].strip().lower()
                    if subject in knowledge_base.subjects:
                        response = f"üìö –§–æ—Ä–º—É–ª—ã –ø–æ {subject}:\n\n"
                        for topic, formulas in knowledge_base.subjects[subject]['—Ñ–æ—Ä–º—É–ª—ã'].items():
                            response += f"üìñ {topic.capitalize()}:\n"
                            for formula in formulas[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–æ—Ä–º—É–ª—ã
                                response += f"‚Ä¢ {formula}\n"
                            response += "\n"
                        send_message(peer_id, response)
                    else:
                        send_message(peer_id, "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: " + ", ".join(knowledge_base.subjects.keys()))
                
                elif msg == '—Ä–µ—Ñ–µ—Ä–∞—Ç –ø–æ–º–æ—â—å':
                    help_text = """
üìö –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞—Ç–æ–≤:

–ö–æ–º–∞–Ω–¥–∞: —Ä–µ—Ñ–µ—Ä–∞—Ç [—Ç–µ–º–∞]
–ü—Ä–∏–º–µ—Ä: —Ä–µ—Ñ–µ—Ä–∞—Ç –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç

‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≤ Wikipedia
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
‚Ä¢ –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
‚Ä¢ 2 —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–ª–∞–≤—ã
‚Ä¢ –í–≤–µ–¥–µ–Ω–∏–µ —Å —Ü–µ–ª—è–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –≤—ã–≤–æ–¥–∞–º–∏
‚Ä¢ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

üìù –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –û–±—ä–µ–º: 5-8 —Å—Ç—Ä–∞–Ω–∏—Ü
‚Ä¢ –ì–æ—Ç–æ–≤—ã–π Word –¥–æ–∫—É–º–µ–Ω—Ç
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞

‚è± –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: 10-20 —Å–µ–∫—É–Ω–¥

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏ –¥–æ–ø–æ–ª–Ω—è–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª
                    """
                    send_message(peer_id, help_text)
                
                elif msg == '–¥–æ–∫–ª–∞–¥ –ø–æ–º–æ—â—å':
                    help_text = """
üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫–ª–∞–¥–æ–≤:

–ö–æ–º–∞–Ω–¥–∞: –¥–æ–∫–ª–∞–¥ [—Ç–µ–º–∞] —Å—Ç—Ä–∞–Ω–∏—Ü [—á–∏—Å–ª–æ]
–ü—Ä–∏–º–µ—Ä: –¥–æ–∫–ª–∞–¥ –ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü 10

‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–º–∞
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞–º–∏
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
‚Ä¢ –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

üìä –î–∏–∞–ø–∞–∑–æ–Ω –æ–±—ä–µ–º–æ–≤:
‚Ä¢ 1-3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã: 2 –≥–ª–∞–≤—ã, 2 –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
‚Ä¢ 4-8 —Å—Ç—Ä–∞–Ω–∏—Ü: 3 –≥–ª–∞–≤—ã, 3 –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞  
‚Ä¢ 9-20 —Å—Ç—Ä–∞–Ω–∏—Ü: 4 –≥–ª–∞–≤—ã, 4 –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –î–ª—è –∫—É—Ä—Å–æ–≤—ã—Ö: 10-15 —Å—Ç—Ä–∞–Ω–∏—Ü
‚Ä¢ –î–ª—è —Å–µ–º–∏–Ω–∞—Ä–æ–≤: 5-8 —Å—Ç—Ä–∞–Ω–∏—Ü
‚Ä¢ –î–ª—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π: 3-5 —Å—Ç—Ä–∞–Ω–∏—Ü
                    """
                    send_message(peer_id, help_text)
                
                elif msg == '—Ä–∞—Å—á–µ—Ç—ã –ø–æ–º–æ—â—å':
                    help_text = """
üìê –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã:

–ö–æ–º–∞–Ω–¥–∞: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å [–ø—Ä–µ–¥–º–µ—Ç] [–∑–∞–¥–∞—á–∞]
–ü—Ä–∏–º–µ—Ä: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∫–∞ –º–∞—Å—Å–∞ 10 —É—Å–∫–æ—Ä–µ–Ω–∏–µ 2

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:
‚Ä¢ –º–µ—Ö–∞–Ω–∏–∫–∞ - —Ä–∞—Å—á–µ—Ç—ã –ø–æ —Ñ–∏–∑–∏–∫–µ

üîß –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:
‚Ä¢ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∫–∞ –º–∞—Å—Å–∞ 5 —Å–∫–æ—Ä–æ—Å—Ç—å 20 —ç–Ω–µ—Ä–≥–∏—è_–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è
‚Ä¢ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∫–∞ –º–∞—Å—Å–∞ 10 –≤—ã—Å–æ—Ç–∞ 5 —ç–Ω–µ—Ä–≥–∏—è_–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è
‚Ä¢ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∫–∞ –º–∞—Å—Å–∞ 2 —É—Å–∫–æ—Ä–µ–Ω–∏–µ 3 —Å–∏–ª–∞

üìñ –§–æ—Ä–º—É–ª—ã:
‚Ä¢ —Ñ–æ—Ä–º—É–ª—ã –º–µ—Ö–∞–Ω–∏–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã
                    """
                    send_message(peer_id, help_text)
                
                elif msg == '—Ä–µ—Ñ–µ—Ä–∞—Ç –ø—Ä–∏–º–µ—Ä—ã':
                    examples = """
üìã –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞—Ç–æ–≤:

üî¨ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏:
‚Ä¢ –ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞
‚Ä¢ –ì–µ–Ω–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏–º–∞—Ç–∞

üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—É–∫–∏:
‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
‚Ä¢ –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
‚Ä¢ –ù–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

üåç –ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–∞—É–∫–∏:
‚Ä¢ –î—Ä–µ–≤–Ω–∏–π –†–∏–º
‚Ä¢ –≠–ø–æ—Ö–∞ –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ú–∏—Ä–æ–≤—ã–µ —Ä–µ–ª–∏–≥–∏–∏

üíº –≠–∫–æ–Ω–æ–º–∏–∫–∞:
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
‚Ä¢ –¶–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞
‚Ä¢ –ì–ª–æ–±–∞–ª–∏–∑–∞—Ü–∏—è

üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ä–µ—Ñ–µ—Ä–∞—Ç [—Ç–µ–º–∞]
                    """
                    send_message(peer_id, examples)
                
                # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                elif is_admin(user_id):
                    if msg.startswith('!—Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç '):
                        subject_name = original_text[16:].strip()
                        if subject_name:
                            success, message = create_subject(subject_name, user_id)
                            send_message(peer_id, message)
                        else:
                            send_message(peer_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
                    
                    elif msg.startswith('!–¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫–ª–∞–¥ '):
                        try:
                            parts = original_text[17:].strip().split(';')
                            if len(parts) >= 3:
                                subject_name = parts[0].strip()
                                report_number = int(parts[1].strip())
                                report_title = parts[2].strip()
                                max_per_student = int(parts[3]) if len(parts) > 3 else 1
                                
                                success, message = add_report_to_subject(subject_name, report_number, report_title, max_per_student, user_id)
                                send_message(peer_id, message)
                            else:
                                send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: !–¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫–ª–∞–¥ [–ø—Ä–µ–¥–º–µ—Ç];[–Ω–æ–º–µ—Ä];[–Ω–∞–∑–≤–∞–Ω–∏–µ];[–º–∞–∫—Å.–∫–æ–ª-–≤–æ]")
                        except ValueError:
                            send_message(peer_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª")
                        except Exception as e:
                            send_message(peer_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                    
                    elif msg.startswith('!–¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ '):
                        try:
                            new_admin_id = int(original_text[17:].strip())
                            success, message = add_admin(new_admin_id, user_id)
                            send_message(peer_id, message)
                        except ValueError:
                            send_message(peer_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
                # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                elif msg in ['—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '—Å–µ–≥–æ–¥–Ω—è']:
                    schedule, last_updated = load_schedule()
                    response = format_schedule_day(schedule, 0)
                    if last_updated:
                        response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                    send_message(peer_id, response)
                
                elif msg == '–∑–∞–≤—Ç—Ä–∞':
                    schedule, last_updated = load_schedule()
                    response = format_schedule_day(schedule, 1)
                    if last_updated:
                        response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                    send_message(peer_id, response)
                
                elif msg == '–Ω–µ–¥–µ–ª—è':
                    schedule, last_updated = load_schedule()
                    response = format_schedule_week(schedule, 0)
                    if last_updated:
                        response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                    send_message(peer_id, response)
                
                elif msg == '—Å–ª–µ–¥ –Ω–µ–¥–µ–ª—è':
                    next_week = (CONFIG['current_week'] % 4) + 1
                    schedule, last_updated = load_schedule(next_week)
                    response = f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è\n\n" + format_schedule_week(schedule, 1)
                    if last_updated:
                        response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                    send_message(peer_id, response)
                
                elif msg == '–ø–æ–º–æ—â—å':
                    help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:
‚Ä¢ "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" –∏–ª–∏ "—Å–µ–≥–æ–¥–Ω—è" - –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ "–∑–∞–≤—Ç—Ä–∞" - –Ω–∞ –∑–∞–≤—Ç—Ä–∞  
‚Ä¢ "–Ω–µ–¥–µ–ª—è" - –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
‚Ä¢ "—Å–ª–µ–¥ –Ω–µ–¥–µ–ª—è" - –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é

üìö –î–æ–∫–ª–∞–¥—ã:
‚Ä¢ "—è [–Ω–æ–º–µ—Ä]" - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–ø—Ä–∏–º–µ—Ä: "—è 1")
‚Ä¢ "–¥–æ–∫–ª–∞–¥—ã" - —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
‚Ä¢ "–º–æ–∏ –¥–æ–∫–ª–∞–¥—ã" - –º–æ–∏ –≤–∑—è—Ç—ã–µ –¥–æ–∫–ª–∞–¥—ã
‚Ä¢ "–¥–æ–∫–ª–∞–¥—ã –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]" - –¥–æ–∫–ª–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
‚Ä¢ "–±–µ—Ä—É –¥–æ–∫–ª–∞–¥ [–Ω–æ–º–µ—Ä] –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]" - –≤–∑—è—Ç—å –¥–æ–∫–ª–∞–¥

üìñ –†–µ—Ñ–µ—Ä–∞—Ç—ã:
‚Ä¢ "—Ä–µ—Ñ–µ—Ä–∞—Ç [—Ç–µ–º–∞]" - —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞—Ç (5 —Å—Ç—Ä–∞–Ω–∏—Ü)
‚Ä¢ "—Ä–µ—Ñ–µ—Ä–∞—Ç –ø–æ–º–æ—â—å" - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞–º
‚Ä¢ "—Ä–µ—Ñ–µ—Ä–∞—Ç –ø—Ä–∏–º–µ—Ä—ã" - –ø—Ä–∏–º–µ—Ä—ã —Ç–µ–º

üìÑ –ú–∞—Å—Å–∏–≤–Ω—ã–µ –¥–æ–∫–ª–∞–¥—ã:
‚Ä¢ "–¥–æ–∫–ª–∞–¥ [—Ç–µ–º–∞] —Å—Ç—Ä–∞–Ω–∏—Ü [—á–∏—Å–ª–æ]" - –¥–æ–∫–ª–∞–¥ –Ω—É–∂–Ω–æ–≥–æ –æ–±—ä–µ–º–∞
‚Ä¢ "–¥–æ–∫–ª–∞–¥ –ø–æ–º–æ—â—å" - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –¥–æ–∫–ª–∞–¥–∞–º

üìê –†–∞—Å—á–µ—Ç—ã:
‚Ä¢ "—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å [–ø—Ä–µ–¥–º–µ—Ç] [–∑–∞–¥–∞—á–∞]" - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
‚Ä¢ "—Ñ–æ—Ä–º—É–ª—ã [–ø—Ä–µ–¥–º–µ—Ç]" - –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã
‚Ä¢ "—Ä–∞—Å—á–µ—Ç—ã –ø–æ–º–æ—â—å" - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å—á–µ—Ç–∞–º

‚ö° –ü—Ä–æ—á–µ–µ:
‚Ä¢ "–ø—Ä–∏–≤–µ—Ç" - —Ç–µ—Å—Ç –±–æ—Ç–∞
‚Ä¢ "–ø–æ–º–æ—â—å" - —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫
                    """
                    send_message(peer_id, help_text)
                
                elif msg == '–ø—Ä–∏–≤–µ—Ç':
                    send_message(peer_id, 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –ù–∞–ø–∏—à–∏ "–ø–æ–º–æ—â—å" –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.')
                
                else:
                    send_message(peer_id, '‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏ "–ø–æ–º–æ—â—å" –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.')
                
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

