import vk_api
import json
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
import sqlite3
import datetime
import time
import threading
import requests
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import io
import re
import logging
import wikipediaapi
import random
import math
import sympy as sp
from sympy import symbols, integrate, diff, solve, pi
import numpy as np
from scipy import integrate as sci_integrate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# üîë –ù–ê–°–¢–†–û–ô–ö–ò
CONFIG = {
    "group_id": 232761329,
    "token": "vk1.a.Y2xBv4alWQ55rd1IxtkpKc48ibKqpQ1x0Wyc9Hv0z18elxu3JaSBfCi7F5sJ9H4eKy1jg3iqFOjQTkQyCIYdnf77mcezdC__MLiyRi9Xwfus_uLz7UWd9AR8VPQDr7uMEiD1NxadTzqUllP7p4uqWixuefYkm6ryhgMbFLPSo-hnXKyt0XQ4qvpfIG5kLWlJoH7Ivew1yhgiKmtDWhbHYw",
    "admin_id": 238448950,
    "current_week": 1,
    "chat_id": None
}

# –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã
GROUP_LIST = {
    "1": "–ê–º–æ—Å–æ–≤ –ù–∏–∫–∏—Ç–∞", "2": "–ë–æ–≥–æ–º–æ–ª–æ–≤ –ì–µ–æ—Ä–≥–∏–π", "3": "–í–µ—Å–µ–ª–æ–≤ –î–∞–Ω–∏–∏–ª",
    "4": "–ì—Ä–æ–º–æ–≤ –†–æ–º–∞–Ω", "5": "–î–æ–ª–æ—Ç–∏–Ω –ò–≤–∞–Ω", "6": "–î—É–¥–∞—Ä–µ–≤ –°–≤—è—Ç–æ—Å–ª–∞–≤",
    "7": "–ó—É–µ–≤ –ê–Ω–¥—Ä–µ–π", "8": "–ò–≤–∞–Ω–æ–≤ –ú–∞—Ç–≤–µ–π", "9": "–ö–∞—Ä–ø–æ–≤ –î–º–∏—Ç—Ä–∏–π",
    "10": "–ö–ª–µ—â–µ–≤ –°–µ—Ä–≥–µ–π", "11": "–õ–µ–±–µ–¥–µ–≤ –ö–∏—Ä–∏–ª–ª", "12": "–ù–∞–∑–∞—Ä–µ–Ω–∫–æ–≤ –ò–≤–∞–Ω",
    "13": "–°–≤—è—Ç–µ—Ü –ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "14": "–°–µ–º–µ–Ω–æ–≤ –õ–µ–æ–Ω–∏–¥", "15": "–§–æ–º–∏—á–µ–≤–∞ –ï–ª–∏–∑–∞–≤–µ—Ç–∞",
    "16": "–®–µ–≤—á–µ–Ω–∫–æ –î–∞—Ä—å—è", "17": "–Ø—Ä–µ–º–µ–Ω–∫–æ –ê–Ω—Ç–æ–Ω"
}

# === –ë–ò–ë–õ–ò–û–¢–ï–ö–ê –ó–ù–ê–ù–ò–ô ===
class KnowledgeBase:
    def __init__(self):
        self.subjects = {
            '–º–µ—Ö–∞–Ω–∏–∫–∞': {
                '—Ñ–æ—Ä–º—É–ª—ã': {
                    '–∫–∏–Ω–µ–º–∞—Ç–∏–∫–∞': [
                        'v = s/t (—Å–∫–æ—Ä–æ—Å—Ç—å)',
                        'a = (v - v‚ÇÄ)/t (—É—Å–∫–æ—Ä–µ–Ω–∏–µ)',
                        's = v‚ÇÄt + at¬≤/2 (–ø—É—Ç—å)',
                        'v¬≤ = v‚ÇÄ¬≤ + 2as'
                    ],
                    '–¥–∏–Ω–∞–º–∏–∫–∞': [
                        'F = ma (–≤—Ç–æ—Ä–æ–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞)',
                        'F‚ÇÅ = -F‚ÇÇ (—Ç—Ä–µ—Ç–∏–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞)',
                        'F_—Ç—Ä = ŒºN (—Å–∏–ª–∞ —Ç—Ä–µ–Ω–∏—è)',
                        'P = mg (–≤–µ—Å —Ç–µ–ª–∞)'
                    ],
                    '—ç–Ω–µ—Ä–≥–∏—è': [
                        'E_–∫–∏–Ω = mv¬≤/2',
                        'E_–ø–æ—Ç = mgh',
                        'A = Fs cos Œ± (—Ä–∞–±–æ—Ç–∞)',
                        'N = A/t (–º–æ—â–Ω–æ—Å—Ç—å)'
                    ]
                },
                '–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã': {
                    'g': 9.81,
                    'G': 6.67430e-11,
                    'œÄ': 3.14159
                }
            },
            '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': {
                '—Ñ–æ—Ä–º—É–ª—ã': {
                    '–∞–ª–≥–µ–±—Ä–∞': [
                        '(a + b)¬≤ = a¬≤ + 2ab + b¬≤',
                        'a¬≤ - b¬≤ = (a - b)(a + b)',
                        'ax¬≤ + bx + c = 0',
                        'x = (-b ¬± ‚àö(b¬≤ - 4ac))/2a'
                    ],
                    '–≥–µ–æ–º–µ—Ç—Ä–∏—è': [
                        'S_—Ç—Ä–µ—É–≥ = ¬Ωbh',
                        'S_–∫—Ä—É–≥–∞ = œÄr¬≤',
                        'V_—Å—Ñ–µ—Ä—ã = 4/3œÄr¬≥',
                        'V_—Ü–∏–ª–∏–Ω–¥—Ä–∞ = œÄr¬≤h'
                    ],
                    '—Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è': [
                        'sin¬≤Œ± + cos¬≤Œ± = 1',
                        'sin(Œ± ¬± Œ≤) = sinŒ± cosŒ≤ ¬± cosŒ± sinŒ≤',
                        'cos(Œ± ¬± Œ≤) = cosŒ± cosŒ≤ ‚àì sinŒ± sinŒ≤'
                    ]
                }
            },
            '—Ñ–∏–∑–∏–∫–∞': {
                '—Ñ–æ—Ä–º—É–ª—ã': {
                    '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ': [
                        'I = U/R (–∑–∞–∫–æ–Ω –û–º–∞)',
                        'P = UI (–º–æ—â–Ω–æ—Å—Ç—å)',
                        'Q = I¬≤Rt (—Ç–µ–ø–ª–æ—Ç–∞)',
                        'F = kq‚ÇÅq‚ÇÇ/r¬≤ (–∑–∞–∫–æ–Ω –ö—É–ª–æ–Ω–∞)'
                    ],
                    '–æ–ø—Ç–∏–∫–∞': [
                        'n = c/v (–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è)',
                        '1/f = 1/d + 1/f (—Ñ–æ—Ä–º—É–ª–∞ –ª–∏–Ω–∑—ã)',
                        'Œª = c/ŒΩ (–¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã)'
                    ]
                }
            }
        }
    
    def calculate_mechanics(self, task_type, params):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –º–µ—Ö–∞–Ω–∏–∫–µ"""
        try:
            if task_type == '—Å–∫–æ—Ä–æ—Å—Ç—å':
                if 's' in params and 't' in params:
                    return params['s'] / params['t']
            elif task_type == '—É—Å–∫–æ—Ä–µ–Ω–∏–µ':
                if 'v' in params and 'v0' in params and 't' in params:
                    return (params['v'] - params['v0']) / params['t']
            elif task_type == '—Å–∏–ª–∞':
                if 'm' in params and 'a' in params:
                    return params['m'] * params['a']
            elif task_type == '—ç–Ω–µ—Ä–≥–∏—è_–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è':
                if 'm' in params and 'v' in params:
                    return 0.5 * params['m'] * params['v']**2
            elif task_type == '—ç–Ω–µ—Ä–≥–∏—è_–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è':
                if 'm' in params and 'h' in params:
                    return params['m'] * 9.81 * params['h']
            return None
        except:
            return None
    
    def get_formulas(self, subject, topic):
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º—É–ª—ã –ø–æ —Ç–µ–º–µ"""
        if subject in self.subjects and topic in self.subjects[subject]['—Ñ–æ—Ä–º—É–ª—ã']:
            return self.subjects[subject]['—Ñ–æ—Ä–º—É–ª—ã'][topic]
        return []

# === –£–õ–£–ß–®–ï–ù–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –†–ï–§–ï–†–ê–¢–û–í –ò –î–û–ö–õ–ê–î–û–í ===
class AdvancedReferatGenerator:
    def __init__(self):
        self.wiki_wiki = wikipediaapi.Wikipedia(
            language='ru',
            extract_format=wikipediaapi.ExtractFormat.WIKI,
            user_agent="VKStudentBot/1.0"
        )
        self.knowledge_base = KnowledgeBase()
    
    def search_wikipedia(self, topic):
        """–ü–æ–∏—Å–∫ –≤ Wikipedia"""
        try:
            page = self.wiki_wiki.page(topic)
            if page.exists():
                return {
                    'title': page.title,
                    'content': page.text[:5000],
                    'url': page.fullurl,
                    'exists': True
                }
            return {'exists': False}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ Wikipedia: {e}")
            return {'exists': False}
    
    def generate_extended_content(self, topic, pages=5):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–∞–Ω–∏—Ü"""
        # –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Wikipedia
        wiki_data = self.search_wikipedia(topic)
        
        if pages <= 3:
            # –ö–æ—Ä–æ—Ç–∫–∏–π –¥–æ–∫–ª–∞–¥ (3-5 —Å—Ç—Ä–∞–Ω–∏—Ü)
            chapters_count = 2
            subsections_per_chapter = 2
        elif pages <= 8:
            # –°—Ä–µ–¥–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞—Ç (6-8 —Å—Ç—Ä–∞–Ω–∏—Ü)
            chapters_count = 3
            subsections_per_chapter = 3
        else:
            # –ë–æ–ª—å—à–∞—è —Ä–∞–±–æ—Ç–∞ (9+ —Å—Ç—Ä–∞–Ω–∏—Ü)
            chapters_count = 4
            subsections_per_chapter = 4
        
        chapters = []
        
        for i in range(chapters_count):
            chapter = {
                'title': self._generate_chapter_title(topic, i),
                'subsections': []
            }
            
            for j in range(subsections_per_chapter):
                subsection = {
                    'title': self._generate_subsection_title(topic, i, j),
                    'content': self._generate_subsection_content(topic, i, j, wiki_data)
                }
                chapter['subsections'].append(subsection)
            
            chapters.append(chapter)
        
        return chapters
    
    def _generate_chapter_title(self, topic, chapter_num):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–ª–∞–≤—ã"""
        titles = [
            f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –∏–∑—É—á–µ–Ω–∏—è {topic}",
            f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ {topic}",
            f"–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é {topic}",
            f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {topic}",
            f"–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è {topic}",
            f"–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π {topic}"
        ]
        return titles[chapter_num % len(titles)]
    
    def _generate_subsection_title(self, topic, chapter_num, subsection_num):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞"""
        prefixes = [
            "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
            "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏", 
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
            "–ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
            "–ú–µ—Ç–æ–¥—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã",
            "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã",
            "–ê–Ω–∞–ª–∏–∑ –ø–æ–¥—Ö–æ–¥–æ–≤"
        ]
        return f"{subsection_num + 1}.{chapter_num + 1} {prefixes[(chapter_num + subsection_num) % len(prefixes)]}"
    
    def _generate_subsection_content(self, topic, chapter_num, subsection_num, wiki_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞"""
        base_content = ""
        if wiki_data.get('exists'):
            sentences = wiki_data['content'].split('. ')
            if sentences:
                base_content = '. '.join(sentences[:3]) + '. '
        
        templates = [
            f"–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –∞—Å–ø–µ–∫—Ç {topic} –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –¥–ª—è –Ω–∞—É—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. {base_content}",
            f"–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è {topic} –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—è–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏. {base_content}",
            f"–ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ {topic} —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—é –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤. {base_content}",
            f"–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—Å–ø–µ–∫—Ç–æ–≤ {topic} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å. {base_content}"
        ]
        
        return templates[(chapter_num + subsection_num) % len(templates)]
    
    def create_document_structure(self, topic, doc_type="—Ä–µ—Ñ–µ—Ä–∞—Ç", pages=5):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        
        chapters = self.generate_extended_content(topic, pages)
        
        if doc_type == "–¥–æ–∫–ª–∞–¥":
            doc_title = f"–î–æ–∫–ª–∞–¥ –Ω–∞ —Ç–µ–º—É: '{topic}'"
            doc_subject = "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å"
        else:
            doc_title = f"–†–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ —Ç–µ–º—É: '{topic}'"
            doc_subject = "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –û–±—â–∏–π –∫—É—Ä—Å"
        
        structure = {
            'title': doc_title,
            'subject': doc_subject,
            'student_info': '–í—ã–ø–æ–ª–Ω–∏–ª(–∞): —Å—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã',
            'type': doc_type,
            'pages': pages,
            'introduction': self._generate_introduction(topic, doc_type, pages),
            'chapters': chapters,
            'conclusion': self._generate_conclusion(topic, doc_type),
            'sources': self._generate_sources(topic),
            'appendix': self._generate_appendix(topic)
        }
        
        return structure
    
    def _generate_introduction(self, topic, doc_type, pages):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–∏—è"""
        return f"""–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º—ã '{topic}' –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –µ–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç—å—é –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞—É–∫–µ –∏ –ø—Ä–∞–∫—Ç–∏–∫–µ. 

–¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ {doc_type} - –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ "{topic}".

–ó–∞–¥–∞—á–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:
1. –ò–∑—É—á–∏—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã {topic.lower()}
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏  
3. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è
4. –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–û–±—ä–µ–º —Ä–∞–±–æ—Ç—ã: {pages} —Å—Ç—Ä–∞–Ω–∏—Ü
–ú–µ—Ç–æ–¥—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: –∞–Ω–∞–ª–∏–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    
    def _generate_conclusion(self, topic, doc_type):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è"""
        return f"""–í —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {doc_type} –Ω–∞ —Ç–µ–º—É "{topic}" –±—ã–ª–∏ —Ä–µ—à–µ–Ω—ã –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã:
1. –¢–µ–º–∞ '{topic}' –æ–±–ª–∞–¥–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
2. –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è  
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞–Ω–∏–π

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ–º—ã
- –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
- –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é"""
    
    def _generate_sources(self, topic):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        return [
            "–≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–µ –∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –∏–∑–¥–∞–Ω–∏—è",
            "–ù–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∏–∑–¥–∞–Ω–∏—è", 
            "–£—á–µ–±–Ω–∏–∫–∏ –∏ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –ø–æ—Å–æ–±–∏—è",
            "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å—ã –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã",
            "–ú–æ–Ω–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –Ω–∞—É—á–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            f"Wikipedia - {topic}"
        ]
    
    def _generate_appendix(self, topic):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        return f"""–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ê
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ "{topic}"

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
- –¢–∞–±–ª–∏—Ü—ã –∏ —Å—Ö–µ–º—ã
- –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã 
- –ò–ª–ª—é—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
- –†–∞—Å—á–µ—Ç—ã –∏ —Ñ–æ—Ä–º—É–ª—ã
- –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ë
–ì–ª–æ—Å—Å–∞—Ä–∏–π –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤

–î–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–π."""
    
    def create_word_document(self, doc_structure):
        """–°–æ–∑–¥–∞–Ω–∏–µ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            doc = Document()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
            style = doc.styles['Normal']
            style.font.name = 'Times New Roman'
            style.font.size = Pt(14)
            
            # –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            title = doc.add_heading(doc_structure['title'], 0)
            title.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            doc.add_paragraph("\n" * 4)
            doc.add_paragraph(doc_structure['subject']).alignment = WD_ALIGN_PARAGRAPH.CENTER
            doc.add_paragraph("\n" * 3)
            doc.add_paragraph(doc_structure['student_info']).alignment = WD_ALIGN_PARAGRAPH.CENTER
            doc.add_paragraph("\n" * 3)
            date_para = doc.add_paragraph(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.datetime.now().strftime('%d.%m.%Y')}")
            date_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            doc.add_page_break()
            
            # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            title = doc.add_heading('–°–û–î–ï–†–ñ–ê–ù–ò–ï', level=1)
            title.alignment = WD_ALIGN_PARAGRAPH.CENTER
            doc.add_paragraph()
            doc.add_paragraph("–í–≤–µ–¥–µ–Ω–∏–µ")
            
            for i, chapter in enumerate(doc_structure['chapters']):
                doc.add_paragraph(f"–ì–ª–∞–≤–∞ {i+1}. {chapter['title']}")
                for j, subsection in enumerate(chapter['subsections']):
                    doc.add_paragraph(f"   {subsection['title']}")
            
            doc.add_paragraph("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ")
            doc.add_paragraph("–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            doc.add_paragraph("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            
            doc.add_page_break()
            
            # –í–≤–µ–¥–µ–Ω–∏–µ
            doc.add_heading('–í–í–ï–î–ï–ù–ò–ï', level=1)
            for paragraph in doc_structure['introduction'].split('\n\n'):
                if paragraph.strip():
                    p = doc.add_paragraph(paragraph)
                    p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –≥–ª–∞–≤—ã
            for i, chapter in enumerate(doc_structure['chapters']):
                doc.add_page_break()
                doc.add_heading(f'–ì–õ–ê–í–ê {i+1}. {chapter["title"].upper()}', level=1)
                
                for subsection in chapter['subsections']:
                    doc.add_heading(subsection['title'], level=2)
                    p = doc.add_paragraph(subsection['content'])
                    p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
                    doc.add_paragraph()
            
            # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
            doc.add_page_break()
            doc.add_heading('–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï', level=1)
            for paragraph in doc_structure['conclusion'].split('\n\n'):
                if paragraph.strip():
                    p = doc.add_paragraph(paragraph)
                    p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
            doc.add_page_break()
            doc.add_heading('–°–ü–ò–°–û–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–• –ò–°–¢–û–ß–ù–ò–ö–û–í', level=1)
            for source in doc_structure['sources']:
                p = doc.add_paragraph(source, style='List Bullet')
                p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
            
            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            doc.add_page_break()
            doc.add_heading('–ü–†–ò–õ–û–ñ–ï–ù–ò–ï', level=1)
            p = doc.add_paragraph(doc_structure['appendix'])
            p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
            file_stream = io.BytesIO()
            doc.save(file_stream)
            file_stream.seek(0)
            
            return file_stream
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return None
    
    def generate_document(self, topic, doc_type="—Ä–µ—Ñ–µ—Ä–∞—Ç", pages=5):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            logging.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {doc_type}: {topic}, {pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_structure = self.create_document_structure(topic, doc_type, pages)
            
            if not doc_structure:
                return None, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É {doc_type}"
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc_file = self.create_word_document(doc_structure)
            
            if not doc_file:
                return None, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            
            success_message = f"""‚úÖ {doc_type.capitalize()} –Ω–∞ —Ç–µ–º—É '{topic}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ –¢–∏–ø: {doc_type.capitalize()}
‚Ä¢ –û–±—ä–µ–º: {pages} —Å—Ç—Ä–∞–Ω–∏—Ü
‚Ä¢ –ì–ª–∞–≤: {len(doc_structure['chapters'])}
‚Ä¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤: {sum(len(ch['subsections']) for ch in doc_structure['chapters'])}

üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
‚Ä¢ –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
‚Ä¢ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏–º–µ—Ä–∞–º–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
            
            return doc_file, success_message
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {doc_type}: {e}")
            return None, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {doc_type}"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
advanced_generator = AdvancedReferatGenerator()
knowledge_base = KnowledgeBase()

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)

# –í –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –î–û–ë–ê–í–õ–Ø–ï–ú:

# === –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ ===
elif msg.startswith('–¥–æ–∫–ª–∞–¥ '):
    parts = original_text[7:].strip().split(' —Å—Ç—Ä–∞–Ω–∏—Ü')
    if len(parts) == 2:
        topic = parts[0].strip()
        try:
            pages = int(parts[1].strip())
            if pages < 1 or pages > 20:
                send_message(peer_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –æ—Ç 1 –¥–æ 20 —Å—Ç—Ä–∞–Ω–∏—Ü")
            else:
                send_message(peer_id, f"üìö –°–æ–∑–¥–∞—é –¥–æ–∫–ª–∞–¥ –Ω–∞ —Ç–µ–º—É: '{topic}'\nüìÑ –û–±—ä–µ–º: {pages} —Å—Ç—Ä–∞–Ω–∏—Ü\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
                doc_file, message = advanced_generator.generate_document(topic, "–¥–æ–∫–ª–∞–¥", pages)
                if doc_file:
                    filename = f"–î–æ–∫–ª–∞–¥_{topic.replace(' ', '_')[:20]}_{pages}—Å—Ç—Ä.docx"
                    if send_document(peer_id, doc_file, filename, message):
                        print(f"‚úÖ –î–æ–∫–ª–∞–¥ '{topic}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    else:
                        send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                else:
                    send_message(peer_id, message)
        except ValueError:
            send_message(peer_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —á–∏—Å–ª–æ–º")
    else:
        send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: –¥–æ–∫–ª–∞–¥ [—Ç–µ–º–∞] —Å—Ç—Ä–∞–Ω–∏—Ü [—á–∏—Å–ª–æ]")

elif msg.startswith('—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å '):
    parts = original_text[11:].strip().split()
    if len(parts) >= 2:
        subject = parts[0].lower()
        task = ' '.join(parts[1:])
        
        if subject == '–º–µ—Ö–∞–Ω–∏–∫–∞':
            # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–¥–∞—á–∏
            params = {}
            if '–º–∞—Å—Å' in task:
                params['m'] = float(re.findall(r'–º–∞—Å—Å[–∞—ã—É]? (\d+)', task)[0])
            if '—Å–∫–æ—Ä–æ—Å—Ç' in task:
                speeds = re.findall(r'—Å–∫–æ—Ä–æ—Å—Ç[—å–∏]? (\d+)', task)
                if speeds:
                    params['v'] = float(speeds[0])
            if '–≤—Ä–µ–º—è' in task:
                times = re.findall(r'–≤—Ä–µ–º[—è–µ–Ω–∏]? (\d+)', task)
                if times:
                    params['t'] = float(times[0])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
            if '—É—Å–∫–æ—Ä–µ–Ω' in task:
                result = knowledge_base.calculate_mechanics('—É—Å–∫–æ—Ä–µ–Ω–∏–µ', params)
                if result:
                    send_message(peer_id, f"üìê –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:\n–£—Å–∫–æ—Ä–µ–Ω–∏–µ = {result:.2f} –º/—Å¬≤")
                else:
                    send_message(peer_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è")
            elif '—Å–∏–ª' in task:
                result = knowledge_base.calculate_mechanics('—Å–∏–ª–∞', params)
                if result:
                    send_message(peer_id, f"üìê –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:\n–°–∏–ª–∞ = {result:.2f} –ù")
                else:
                    send_message(peer_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã")
            else:
                send_message(peer_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å: —É—Å–∫–æ—Ä–µ–Ω–∏–µ, —Å–∏–ª–∞, —ç–Ω–µ—Ä–≥–∏—è")
        else:
            send_message(peer_id, "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: –º–µ—Ö–∞–Ω–∏–∫–∞")
    else:
        send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å [–ø—Ä–µ–¥–º–µ—Ç] [–∑–∞–¥–∞—á–∞]")

elif msg.startswith('—Ñ–æ—Ä–º—É–ª—ã '):
    subject = original_text[8:].strip().lower()
    if subject in knowledge_base.subjects:
        response = f"üìö –§–æ—Ä–º—É–ª—ã –ø–æ {subject}:\n\n"
        for topic, formulas in knowledge_base.subjects[subject]['—Ñ–æ—Ä–º—É–ª—ã'].items():
            response += f"üìñ {topic.capitalize()}:\n"
            for formula in formulas[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–æ—Ä–º—É–ª—ã
                response += f"‚Ä¢ {formula}\n"
            response += "\n"
        send_message(peer_id, response)
    else:
        send_message(peer_id, "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: " + ", ".join(knowledge_base.subjects.keys()))

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞)
