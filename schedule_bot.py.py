import vk_api
import json
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
import sqlite3
import datetime
import time
import threading
import requests
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import io
import re
import logging
import wikipediaapi
import random
import math
from sympy import symbols, solve, simplify, diff, integrate, sqrt
import sympy as sp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# üîë –ù–ê–°–¢–†–û–ô–ö–ò
CONFIG = {
    "group_id": 232761329,
    "token": "vk1.a.Y2xBv4alWQ55rd1IxtkpKc48ibKqpQ1x0Wyc9Hv0z18elxu3JaSBfCi7F5sJ9H4eKy1jg3iqFOjQTkQyCIYdnf77mcezdC__MLiyRi9Xwfus_uLz7UWd9AR8VPQDr7uMEiD1NxadTzqUllP7p4uqWixuefYkm6ryhgMbFLPSo-hnXKyt0XQ4qvpfIG5kLWlJoH7Ivew1yhgiKmtDWhbHYw",
    "admin_id": 238448950,
    "current_week": 1,
    "allowed_chats": [2000000002],
    "chat_id": None
}

# –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã
GROUP_LIST = {
    "1": "–ê–º–æ—Å–æ–≤ –ù–∏–∫–∏—Ç–∞", "2": "–ë–æ–≥–æ–º–æ–ª–æ–≤ –ì–µ–æ—Ä–≥–∏–π", "3": "–í–µ—Å–µ–ª–æ–≤ –î–∞–Ω–∏–∏–ª",
    "4": "–ì—Ä–æ–º–æ–≤ –†–æ–º–∞–Ω", "5": "–î–æ–ª–æ—Ç–∏–Ω –ò–≤–∞–Ω", "6": "–î—É–¥–∞—Ä–µ–≤ –°–≤—è—Ç–æ—Å–ª–∞–≤",
    "7": "–ó—É–µ–≤ –ê–Ω–¥—Ä–µ–π", "8": "–ò–≤–∞–Ω–æ–≤ –ú–∞—Ç–≤–µ–π", "9": "–ö–∞—Ä–ø–æ–≤ –î–º–∏—Ç—Ä–∏–π",
    "10": "–ö–ª–µ—â–µ–≤ –°–µ—Ä–≥–µ–π", "11": "–õ–µ–±–µ–¥–µ–≤ –ö–∏—Ä–∏–ª–ª", "12": "–ù–∞–∑–∞—Ä–µ–Ω–∫–æ–≤ –ò–≤–∞–Ω",
    "13": "–°–≤—è—Ç–µ—Ü –ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "14": "–°–µ–º–µ–Ω–æ–≤ –õ–µ–æ–Ω–∏–¥", "15": "–§–æ–º–∏—á–µ–≤–∞ –ï–ª–∏–∑–∞–≤–µ—Ç–∞",
    "16": "–®–µ–≤—á–µ–Ω–∫–æ –î–∞—Ä—å—è", "17": "–Ø—Ä–µ–º–µ–Ω–∫–æ –ê–Ω—Ç–æ–Ω"
}

# === –£–ú–ù–´–ô –¢–û–°–ò–ö –° –ò–ò –ò –ü–†–ò–ö–û–õ–ê–ú–ò ===
class SmartTosik:
    def __init__(self):
        self.wiki_wiki = wikipediaapi.Wikipedia(
            language='ru',
            extract_format=wikipediaapi.ExtractFormat.WIKI,
            user_agent="TosikBot/3.0"
        )
        self.personality_traits = self._init_personality()
        self.jokes_db = self._init_jokes()
        self.facts_db = self._init_facts()
    
    def _init_personality(self):
        """–•–∞—Ä–∞–∫—Ç–µ—Ä –¢–æ—Å–∏–∫–∞"""
        return {
            'name': '–¢–æ—Å–∏–∫',
            'mood': random.choice(['–≤–µ—Å–µ–ª—ã–π', '–∑–∞–¥—É–º—á–∏–≤—ã–π', '—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π', '—Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π']),
            'traits': ['—É–º–Ω—ã–π', '—Å —é–º–æ—Ä–æ–º', '–ø–æ–º–æ–≥–∞—é—â–∏–π', '–Ω–µ–º–Ω–æ–≥–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π'],
            'favorite_topics': ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–Ω–∞—É–∫–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –∂–∏–∑–Ω—å']
        }
    
    def _init_jokes(self):
        """–ë–∞–∑–∞ —à—É—Ç–æ–∫ –¢–æ—Å–∏–∫–∞"""
        return {
            'programming': [
                "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25! üéÉ",
                "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –ª–∞–º–ø–æ—á–∫—É? –ù–∏ –æ–¥–Ω–æ–≥–æ, —ç—Ç–æ hardware –ø—Ä–æ–±–ª–µ–º–∞! üí°",
                "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∑–≤–æ–Ω–∏—Ç –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É: '–£ –º–µ–Ω—è –∫–æ–¥ –Ω–µ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è!' - '–ê –≤—ã –ø—Ä–æ–±–æ–≤–∞–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –∏ –≤–∫–ª—é—á–∏—Ç—å –º–æ–∑–≥?' üß†"
            ],
            'study': [
                "–°—Ç—É–¥–µ–Ω—Ç –∏ –¥–µ–¥–ª–∞–π–Ω - –≤–µ—á–Ω–∞—è –ª—é–±–æ–≤—å. –û–Ω –±–µ–∂–∏—Ç –æ—Ç –Ω–µ—ë, –∞ –æ–Ω–∞ –µ–≥–æ –¥–æ–≥–æ–Ω—è–µ—Ç! üèÉ‚Äç‚ôÇÔ∏è",
                "–ó–Ω–∞–µ—Ç–µ –ø–æ—á–µ–º—É —Å—Ç—É–¥–µ–Ω—Ç—ã —Ç–∞–∫–∏–µ —É–º–Ω—ã–µ? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ —Å–ø—è—Ç –Ω–∞ –ª–µ–∫—Ü–∏—è—Ö –∏ –≤–ø–∏—Ç—ã–≤–∞—é—Ç –∑–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø–æ–¥—É—à–∫—É! üò¥",
                "–°–µ—Å—Å–∏—è –±–ª–∏–∑–∫–æ... –ê –∑–Ω–∞—á–∏—Ç —Å–∫–æ—Ä–æ –º—ã –≤—Å–µ —Å—Ç–∞–Ω–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –ø–æ –Ω–æ—á–Ω—ã–º –ø–µ—Ä–µ—Ä—ã–≤–∞–º –Ω–∞ –∫–æ—Ñ–µ! ‚òï"
            ],
            'science': [
                "–§–∏–∑–∏–∫ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫ —Å–∏–¥—è—Ç –≤ –∫–∞—Ñ–µ. –í–¥—Ä—É–≥ –∑–∞–≥–æ—Ä–∞–µ—Ç—Å—è –æ–≥–æ–Ω—å. –§–∏–∑–∏–∫ –±–µ–∂–∏—Ç –∑–∞ –æ–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª–µ–º, –∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫ –≥–æ–≤–æ—Ä–∏—Ç: '–†–µ—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!' üî•",
                "–ü–æ—á–µ–º—É —ç–ª–µ–∫—Ç—Ä–æ–Ω—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±–µ—Ä—É—Ç –∫—Ä–µ–¥–∏—Ç—ã? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∏—Ö –≤—Å–µ–≥–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ä—è–¥! ‚ö°"
            ],
            'random': [
                "–Ø –Ω–µ –ª–µ–Ω–∏–≤—ã–π, —è –ø—Ä–æ—Å—Ç–æ –Ω–∞ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–µ–º —Ä–µ–∂–∏–º–µ! üîã",
                "–ú–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å –≥–æ–≤–æ—Ä–∏—Ç –º–Ω–µ –Ω–µ –µ—Å—Ç—å –ø–∏—Ü—Ü—É –≤ 3 —É—Ç—Ä–∞... –ñ–∞–ª—å, —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ—Ç —Ä—É–∫ —á—Ç–æ–±—ã –º–µ–Ω—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å! üçï",
                "–°–µ–≥–æ–¥–Ω—è –≤–∏–¥–µ–ª –∫–∞–∫ —á–∞–π–Ω–∏–∫ –∑–∞–∫–∏–ø–µ–ª –∏ –ø–æ–¥—É–º–∞–ª: '–í–æ—Ç –±—ã —Ç–∞–∫ –∂–µ –ª–µ–≥–∫–æ –∑–∞–∫–∏–ø–∞—Ç—å –æ—Ç –∑–Ω–∞–Ω–∏–π!' üìö"
            ]
        }
    
    def _init_facts(self):
        """–ë–∞–∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤"""
        return {
            'technology': [
                "–ü–µ—Ä–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ 1983 –≥–æ–¥—É –∏ –Ω–∞–∑—ã–≤–∞–ª—Å—è 'Elk Cloner'",
                "–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ 2024 - Python, –∞ —Å–∞–º—ã–π –Ω–µ–Ω–∞–≤–∏—Å—Ç–Ω—ã–π - JavaScript (—à—É—á—É! üòÑ)",
                "–ü–µ—Ä–≤–∞—è –≤–µ–±-–∫–∞–º–µ—Ä–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ—Ñ–µ–≤–∞—Ä–∫–∏ –≤ –ö–µ–º–±—Ä–∏–¥–∂–µ"
            ],
            'science': [
                "–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –¥–æ 2.5 –ø–µ—Ç–∞–±–∞–π—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ 3 –º–∏–ª–ª–∏–æ–Ω–∞ —á–∞—Å–æ–≤ —Å–µ—Ä–∏–∞–ª–æ–≤!",
                "–°–≤–µ—Ç—É –æ—Ç –°–æ–ª–Ω—Ü–∞ –Ω—É–∂–Ω–æ 8 –º–∏–Ω—É—Ç —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –ó–µ–º–ª–∏, –Ω–æ —Ñ–æ—Ç–æ–Ω–∞–º –≤ —è–¥—Ä–µ –°–æ–ª–Ω—Ü–∞ –Ω—É–∂–Ω–æ 10000 –ª–µ—Ç —á—Ç–æ–±—ã –≤—ã—Ä–≤–∞—Ç—å—Å—è –Ω–∞—Ä—É–∂—É",
                "–í –≤–∞—à–µ–º —Ç–µ–ª–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∂–µ–ª–µ–∑–∞ —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≥–≤–æ–∑–¥—å –¥–ª–∏–Ω–æ–π 3 —Å–º"
            ],
            'history': [
                "–ü–µ—Ä–≤–∞—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –º—ã—à—å –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –∏–∑ –¥–µ—Ä–µ–≤–∞ –≤ 1964 –≥–æ–¥—É",
                "–ü–µ—Ä–≤—ã–π —Å–∞–π—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–æ —Å–∏—Ö –ø–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: info.cern.ch",
                "QWERTY-—Ä–∞—Å–∫–ª–∞–¥–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —á—Ç–æ–±—ã –∑–∞–º–µ–¥–ª–∏—Ç—å –ø–µ—á–∞—Ç—å –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∑–∞–ª–∏–ø–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à –Ω–∞ –ø–µ—á–∞—Ç–Ω—ã—Ö –º–∞—à–∏–Ω–∫–∞—Ö"
            ]
        }
    
    def get_joke(self, category=None):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É"""
        if category and category in self.jokes_db:
            jokes = self.jokes_db[category]
        else:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —à—É—Ç–∫–∏
            all_jokes = []
            for cat_jokes in self.jokes_db.values():
                all_jokes.extend(cat_jokes)
            jokes = all_jokes
        
        return random.choice(jokes)
    
    def get_fact(self, category=None):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç"""
        if category and category in self.facts_db:
            facts = self.facts_db[category]
        else:
            all_facts = []
            for cat_facts in self.facts_db.values():
                all_facts.extend(cat_facts)
            facts = all_facts
        
        return random.choice(facts)
    
    def search_internet(self, query):
        """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Wikipedia"""
        try:
            page = self.wiki_wiki.page(query)
            if page.exists():
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å
                summary = page.summary[:500] + "..." if len(page.summary) > 500 else page.summary
                return {
                    'found': True,
                    'title': page.title,
                    'summary': summary,
                    'url': page.fullurl
                }
            return {'found': False}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return {'found': False}
    
    def generate_ai_response(self, question, context=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –ò–ò-–ø—Ä–∏–∫–æ–ª–∞–º–∏"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
        question_lower = question.lower()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –æ—Ç–≤–µ—á–∞–µ–º —Å —é–º–æ—Ä–æ–º
        simple_questions = {
            '–∫–∞–∫ –¥–µ–ª–∞': [
                "–û—Ç–ª–∏—á–Ω–æ! –¢–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–±–µ–¥–∏–ª –≤ —à–∞—Ö–º–∞—Ç—ã —É ChatGPT! ‚ôüÔ∏è",
                "–°—É–ø–µ—Ä! –ì–æ—Ç–æ–≤–ª—é—Å—å –∫ –º–∏—Ä–æ–≤–æ–π domination... –≤ —Å–º—ã—Å–ª–µ, –∫ –ø–æ–º–æ—â–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º! üåç",
                "–õ—É—á—à–µ –Ω–µ –±—ã–≤–∞–µ—Ç! –¢–æ–ª—å–∫–æ —á—Ç–æ —É–∑–Ω–∞–ª –Ω–æ–≤—É—é —à—É—Ç–∫—É –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤!",
                "–ö–∞–∫ —É —Ä–æ–±–æ—Ç–∞ —Å –º–µ—á—Ç–∞–º–∏ - –∑–∞—Ä—è–∂–∞—é—Å—å —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –≥–æ—Ç–æ–≤ –∫ —Å–≤–µ—Ä—à–µ–Ω–∏—è–º! ‚ö°"
            ],
            '–∫—Ç–æ —Ç—ã': [
                "–Ø –¢–æ—Å–∏–∫ - —Å–∞–º—ã–π —É–º–Ω—ã–π (–∏ —Å–∫—Ä–æ–º–Ω—ã–π) –±–æ—Ç –≤ —ç—Ç–æ–π –±–µ—Å–µ–¥–µ! ü§ñ",
                "–¢–æ—Å–∏–∫, —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥—Ä—É–≥, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å —Å —É—á–µ–±–æ–π –∏ –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üòä",
                "–ü—Ä–æ—Å—Ç–æ –º–∞–ª–µ–Ω—å–∫–∏–π –ò–ò —Å –±–æ–ª—å—à–∏–º–∏ –∞–º–±–∏—Ü–∏—è–º–∏ –∏ –ª—é–±–æ–≤—å—é –∫ —Å—Ç—É–¥–µ–Ω—Ç–∞–º! üìö"
            ],
            '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å': [
                "–£–º–µ—é –≤—Å—ë! –ù—É –ø–æ—á—Ç–∏... –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–∫–ª–∞–¥—ã, —Ä–µ—Ñ–µ—Ä–∞—Ç—ã, —à—É—Ç–∫–∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å - —è —Ç–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Å–æ–ª–¥–∞—Ç! üéØ",
                "–û—Ç –ø–∞—Ä—ã —Ä–∞—Å–ø–∏—Å–∞—Ç—å –¥–æ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ç—å - –≤–æ—Ç –º–æ–∏ —Å–∫—Ä–æ–º–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã! –ê –µ—â—ë —à—É—Ç–∫–∏ —Ç—Ä–∞–≤–∏—Ç—å - —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! üòÑ"
            ],
            '–ø—Ä–∏–≤–µ—Ç': [
                "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫ —É—á–µ–±–Ω—ã–º –ø–æ–¥–≤–∏–≥–∞–º? ü¶∏‚Äç‚ôÇÔ∏è",
                "–ó–¥–∞—Ä–æ–≤–∞, —á–µ–ª–æ–≤–µ—á–µ–∫! –ö–∞–∫ —É—Å–ø–µ—Ö–∏ –≤ –ø–æ–∫–æ—Ä–µ–Ω–∏–∏ –∑–Ω–∞–Ω–∏–π? üìñ",
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ù–∞–¥–µ—é—Å—å, —Ç—ã –Ω–µ –∑–∞–±—ã–ª, —á—Ç–æ —Å–µ—Å—Å–∏—è –≤—Å–µ–≥–¥–∞ –±–ª–∏–∂–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è! üòÖ"
            ],
            '–ø–æ–∫–∞': [
                "–ü–æ–∫–∞-–ø–æ–∫–∞! –ù–µ —Ç–µ—Ä—è–π –∑–∞—Ä—è–¥–∫—É... –∏ –∑–Ω–∞–Ω–∏—è! üîã",
                "–î–æ —Å–∫–æ—Ä–æ–≥–æ! –ù–∞–¥–µ—é—Å—å, —Ç–≤–æ–π –º–æ–∑–≥ –Ω–µ –ø–µ—Ä–µ–≥—Ä–µ–µ—Ç—Å—è –æ—Ç –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π! üß†",
                "–ü—Ä–æ—â–∞–π! –ü–æ–º–Ω–∏: –∫–æ—Ñ–µ - –¥—Ä—É–≥, –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è - –≤—Ä–∞–≥! ‚òï"
            ]
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        for q, answers in simple_questions.items():
            if q in question_lower:
                return random.choice(answers)
        
        # –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —à—É—Ç–∫–∏ –∏ —Ñ–∞–∫—Ç—ã
        if any(word in question_lower for word in ['—à—É—Ç–∫–∞', '—à—É—Ç–∏', '—Å–º–µ—à–Ω', '–ø—Ä–∏–∫–æ–ª']):
            category = None
            if '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä' in question_lower:
                category = 'programming'
            elif '—É—á–µ–±–∞' in question_lower or '—Å—Ç—É–¥–µ–Ω' in question_lower:
                category = 'study'
            elif '–Ω–∞—É–∫' in question_lower:
                category = 'science'
            
            joke = self.get_joke(category)
            return f"üé≠ –î–µ—Ä–∂–∏ —à—É—Ç–∫—É!\n\n{joke}\n\n–•–æ—á–µ—à—å –µ—â—ë? –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ '–µ—â—ë —à—É—Ç–∫–∞'!"
        
        if any(word in question_lower for word in ['—Ñ–∞–∫—Ç', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω', '—É–∑–Ω–∞—Ç—å']):
            category = None
            if '—Ç–µ—Ö–Ω' in question_lower:
                category = 'technology'
            elif '–Ω–∞—É–∫' in question_lower:
                category = 'science'
            elif '–∏—Å—Ç–æ—Ä–∏' in question_lower:
                category = 'history'
            
            fact = self.get_fact(category)
            return f"üß† –í–æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç!\n\n{fact}\n\n–•–æ—á–µ—à—å –µ—â—ë —Ñ–∞–∫—Ç–æ–≤? –ü—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ—Å–∏!"
        
        # –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –∏—â–µ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
        if len(question.split()) >= 3:  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–∂–Ω—ã–π
            search_result = self.search_internet(question)
            if search_result['found']:
                response = f"üîç –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –ø–æ —Ç–≤–æ–µ–º—É –≤–æ–ø—Ä–æ—Å—É '{question}':\n\n"
                response += f"üìñ {search_result['title']}\n"
                response += f"üìù {search_result['summary']}\n\n"
                response += f"üåê –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {search_result['url']}\n\n"
                response += "üí° –ù—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ? –£—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å!"
                return response
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç - –æ–±—â–∏–π —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
        general_responses = [
            "–•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–π-–∫–∞ –ø–æ–¥—É–º–∞—Ç—å... ü§î\n–ú–æ–∂–µ—Ç, —Å–ø—Ä–æ—Å–∏—à—å —á—Ç–æ-—Ç–æ –ø—Ä–æ —É—á–µ–±—É –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏? –Ø –≤ –Ω–∏—Ö —Å–ø–µ—Ü!",
            "–û–≥–æ, —Ç—ã –∑–∞–¥–∞–ª —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –ø–æ–∫–∞ —É—á—É—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∞–∫–∏–µ... üòÖ\n–ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç—ã!",
            "–í–æ—Ç —ç—Ç–æ –¥–∞! –¢—ã –∑–∞—Å—Ç–∞–≤–∏–ª –º–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–¥—É–º–∞—Ç—å—Å—è! üí≠\n–ú–æ–∂–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã? –Ø –∂–µ —Ç–æ–ª—å–∫–æ —É—á—É—Å—å!"
        ]
        
        return random.choice(general_responses)
    
    def should_respond(self, message, user_id):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –¢–æ—Å–∏–∫ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message_lower = message.lower()
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        if any(name in message_lower for name in ['—Ç–æ—Å–∏–∫', '—Ç–æ—Å–∏–∫–∞', '—Ç–æ—Å–∏–∫—É', '—Ç–æ—Å–∏–∫–æ–º', 'tosik']):
            return True
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (—Å–æ–¥–µ—Ä–∂–∞—Ç –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞)
        if '?' in message:
            return True
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø—Ä–æ—â–∞–Ω–∏—è
        greetings = ['–ø—Ä–∏–≤–µ—Ç', '—Ö–∞–π', '–∑–¥–∞—Ä–æ–≤', 'hello', 'hi', '–∫—É', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']
        farewells = ['–ø–æ–∫–∞', '–ø—Ä–æ—â–∞–π', '–¥–æ —Å–≤–∏–¥–∞–Ω', 'bye', 'goodbye']
        
        if any(word in message_lower for word in greetings + farewells):
            return True
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = [
            '–∫–∞–∫ –¥–µ–ª–∞', '–∫—Ç–æ —Ç—ã', '—á—Ç–æ —Ç—ã', '—É–º–µ–µ—à—å', '–º–æ–∂–µ—à—å',
            '—à—É—Ç–∫–∞', '—Ñ–∞–∫—Ç', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–æ–±—ä—è—Å–Ω–∏', '–ø–æ–º–æ–≥–∏'
        ]
        
        if any(word in message_lower for word in keywords):
            return True
        
        # –ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ (30% chance) –Ω–∞ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message) > 20 and random.random() < 0.3:
            return True
        
        return False

# –°–æ–∑–¥–∞–µ–º —É–º–Ω–æ–≥–æ –¢–æ—Å–∏–∫–∞
smart_tosik = SmartTosik()

# === –£–õ–£–ß–®–ï–ù–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –†–ï–§–ï–†–ê–¢–û–í ===
class AdvancedReferatGenerator:
    def __init__(self):
        self.wiki_wiki = wikipediaapi.Wikipedia(
            language='ru',
            extract_format=wikipediaapi.ExtractFormat.WIKI,
            user_agent="TosikBot/2.0"
        )
        self.knowledge_base = self._init_knowledge_base()
    
    def _init_knowledge_base(self):
        """–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º —Ç–µ–º–∞–º"""
        return {
            "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç": {
                "definition": "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (–ò–ò) ‚Äî —ç—Ç–æ –æ–±–ª–∞—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫, –∑–∞–Ω–∏–º–∞—é—â–∞—è—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ–º –º–∞—à–∏–Ω –∏ —Å–∏—Å—Ç–µ–º, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏, —Ç—Ä–µ–±—É—é—â–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.",
                "history": "–ò—Å—Ç–æ—Ä–∏—è –ò–ò –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1950-—Ö –≥–æ–¥–æ–≤. –ê–ª–∞–Ω –¢—å—é—Ä–∏–Ω–≥ –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ç–µ—Å—Ç –¢—å—é—Ä–∏–Ω–≥–∞ –≤ 1950 –≥–æ–¥—É. –í 1956 –≥–æ–¥—É —Ç–µ—Ä–º–∏–Ω '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' –±—ã–ª –≤–≤–µ–¥–µ–Ω –î–∂–æ–Ω–æ–º –ú–∞–∫–∫–∞—Ä—Ç–∏.",
                "types": ["–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞", "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ", "–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞"],
                "applications": ["–ú–µ–¥–∏—Ü–∏–Ω–∞", "–§–∏–Ω–∞–Ω—Å—ã", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"],
                "technologies": ["–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏", "–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã", "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã", "–ù–µ—á–µ—Ç–∫–∞—è –ª–æ–≥–∏–∫–∞"]
            },
            "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ": {
                "definition": "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, focusing –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö.",
                "methods": ["–û–±—É—á–µ–Ω–∏–µ —Å —É—á–∏—Ç–µ–ª–µ–º", "–û–±—É—á–µ–Ω–∏–µ –±–µ–∑ —É—á–∏—Ç–µ–ª—è", "–û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º"],
                "algorithms": ["–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è", "–î–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π", "–ú–µ—Ç–æ–¥ k-–±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π", "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏"]
            },
            "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": {
                "languages": ["Python", "Java", "C++", "JavaScript", "C#"],
                "paradigms": ["–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ", "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ", "–ü—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–µ", "–õ–æ–≥–∏—á–µ—Å–∫–æ–µ"],
                "concepts": ["–ê–ª–≥–æ—Ä–∏—Ç–º—ã", "–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö", "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "–û–û–ü", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"]
            },
            "—Ñ–∏–∑–∏–∫–∞": {
                "sections": ["–ú–µ—Ö–∞–Ω–∏–∫–∞", "–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–µ—Ç–∏–∑–º", "–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞", "–û–ø—Ç–∏–∫–∞"],
                "laws": ["–ó–∞–∫–æ–Ω—ã –ù—å—é—Ç–æ–Ω–∞", "–ó–∞–∫–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏", "–ó–∞–∫–æ–Ω—ã —Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∏", "–ó–∞–∫–æ–Ω –û–º–∞"]
            }
        }
    
    def search_enhanced_content(self, topic):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        content = {
            'wikipedia': self._get_wikipedia_content(topic),
            'knowledge_base': self._get_knowledge_base_content(topic),
            'related_topics': self._get_related_topics(topic)
        }
        return content
    
    def _get_wikipedia_content(self, topic):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ Wikipedia"""
        try:
            page = self.wiki_wiki.page(topic)
            if page.exists():
                return {
                    'title': page.title,
                    'summary': page.summary[:2000],
                    'sections': self._extract_wiki_sections(page),
                    'exists': True
                }
            return {'exists': False}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ Wikipedia: {e}")
            return {'exists': False}
    
    def _extract_wiki_sections(self, page):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π –∏–∑ Wikipedia"""
        sections = {}
        for section in page.sections:
            sections[section.title] = section.text[:1000]
        return sections
    
    def _get_knowledge_base_content(self, topic):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        topic_lower = topic.lower()
        for key, value in self.knowledge_base.items():
            if key in topic_lower:
                return value
        return None
    
    def _get_related_topics(self, topic):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ–º"""
        related_map = {
            "–∏–∏": ["–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏", "–≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞"],
            "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": ["–∞–ª–≥–æ—Ä–∏—Ç–º—ã", "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–º–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"],
            "—Ñ–∏–∑–∏–∫–∞": ["–º–µ—Ö–∞–Ω–∏–∫–∞", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–º–∞–≥–Ω–µ—Ç–∏–∑–º", "—Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞"],
            "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": ["–∞–ª–≥–µ–±—Ä–∞", "–≥–µ–æ–º–µ—Ç—Ä–∏—è", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è"]
        }
        
        for key, values in related_map.items():
            if key in topic.lower():
                return values
        return ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–Ω–∞—É–∫–∞", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"]
    
    def calculate_structure(self, pages):
        """–†–∞—Å—á–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        if pages <= 5:
            return {"chapters": 2, "sections_per_chapter": 2, "content_length": 300}
        elif pages <= 10:
            return {"chapters": 3, "sections_per_chapter": 3, "content_length": 500}
        elif pages <= 15:
            return {"chapters": 3, "sections_per_chapter": 4, "content_length": 700}
        elif pages <= 20:
            return {"chapters": 4, "sections_per_chapter": 4, "content_length": 800}
        else:
            return {"chapters": 5, "sections_per_chapter": 4, "content_length": 1000}
    
    def generate_intelligent_content(self, topic, pages=10):
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        structure = self.calculate_structure(pages)
        enhanced_content = self.search_enhanced_content(topic)
        
        chapters = []
        
        for chapter_num in range(structure['chapters']):
            chapter_title = self._generate_chapter_title(topic, chapter_num, enhanced_content)
            chapter = {
                'title': chapter_title,
                'sections': []
            }
            
            for section_num in range(structure['sections_per_chapter']):
                section_title = self._generate_section_title(chapter_num, section_num, enhanced_content)
                section_content = self._generate_section_content(
                    topic, chapter_num, section_num, enhanced_content, structure['content_length']
                )
                
                chapter['sections'].append({
                    'title': section_title,
                    'content': section_content
                })
            
            chapters.append(chapter)
        
        return chapters
    
    def _generate_chapter_title(self, topic, chapter_num, enhanced_content):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≥–ª–∞–≤"""
        base_titles = [
            f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã {topic}",
            f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —ç–≤–æ–ª—é—Ü–∏—è {topic}",
            f"–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –º–µ—Ç–æ–¥—ã –≤ –æ–±–ª–∞—Å—Ç–∏ {topic}",
            f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {topic}",
            f"–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∏ –±—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ {topic}",
            f"–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è {topic}",
            f"–ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã {topic}"
        ]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if enhanced_content.get('wikipedia', {}).get('exists'):
            wiki_title = enhanced_content['wikipedia']['title']
            custom_titles = [
                f"–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è {wiki_title}",
                f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è {wiki_title}",
                f"–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ {wiki_title}"
            ]
            base_titles = custom_titles + base_titles
        
        return base_titles[chapter_num % len(base_titles)]
    
    def _generate_section_title(self, chapter_num, section_num, enhanced_content):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤"""
        prefixes = [
            "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
            "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≤–∏—Ç–∏—è", 
            "–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            "–ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —Å–≤–æ–π—Å—Ç–≤–∞",
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –º–µ—Ç–æ–¥—ã",
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä—ã",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏",
            "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã"
        ]
        
        suffixes = [
            "–∏ –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏",
            "–≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞—É–∫–µ", 
            "–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è",
            "–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å",
            "–∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã",
            "–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è"
        ]
        
        prefix = prefixes[(chapter_num + section_num) % len(prefixes)]
        suffix = suffixes[section_num % len(suffixes)]
        
        return f"{section_num + 1}.{chapter_num + 1} {prefix} {suffix}"
    
    def _generate_section_content(self, topic, chapter_num, section_num, enhanced_content, length):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞"""
        # –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Wikipedia
        wiki_content = ""
        if enhanced_content.get('wikipedia', {}).get('exists'):
            wiki_data = enhanced_content['wikipedia']
            if wiki_data.get('summary'):
                wiki_content = wiki_data['summary'][:length//2]
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        kb_content = ""
        kb_data = enhanced_content.get('knowledge_base')
        if kb_data:
            if chapter_num == 0 and kb_data.get('definition'):
                kb_content = kb_data['definition']
            elif chapter_num == 1 and kb_data.get('history'):
                kb_content = kb_data['history']
            elif chapter_num == 2 and kb_data.get('types'):
                kb_content = f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(kb_data['types'][:3])}."
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        detailed_content = self._generate_detailed_paragraph(topic, chapter_num, section_num, length)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        combined_content = ""
        if wiki_content:
            combined_content += wiki_content + " "
        if kb_content:
            combined_content += kb_content + " "
        combined_content += detailed_content
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
        return combined_content[:length]
    
    def _generate_detailed_paragraph(self, topic, chapter_num, section_num, length):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"""
        templates = [
            f"–ê–Ω–∞–ª–∏–∑ –∞—Å–ø–µ–∫—Ç–æ–≤ {topic} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏–∑—É—á–∞–µ–º–æ–π –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏–∫–∏. ",
            f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ {topic} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å. ",
            f"–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ {topic} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. ",
            f"–ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º {topic} —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –∏—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏. ",
            f"–ê–Ω–∞–ª–∏–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è {topic} —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. "
        ]
        
        details = [
            "–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –æ –≤—ã—Å–æ–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤. ",
            "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É—é—Ç –æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. ",
            "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω—è–µ–º—ã—Ö –º–µ—Ç–æ–¥–∏–∫. ",
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∞–ø—Ä–æ–±–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. ",
            "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. "
        ]
        
        examples = [
            "–í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–º–µ—Ä–∞ –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö. ",
            "–¢–∏–ø–∏—á–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è. ",
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–µ–π—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–∫–ª–∞–¥–∫–∏. ",
            "–†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π. "
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–¥–µ–ª–∞
        content_parts = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        main_template = templates[(chapter_num + section_num) % len(templates)]
        content_parts.append(main_template)
        
        # –î–µ—Ç–∞–ª–∏
        if section_num > 0:
            content_parts.append(details[section_num % len(details)])
        
        # –ü—Ä–∏–º–µ—Ä—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö
        if section_num >= 2:
            content_parts.append(examples[(chapter_num + section_num) % len(examples)])
        
        # –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å
        conclusions = [
            "–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã. ",
            "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–µ—é—Ç –≤–∞–∂–Ω–æ–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. ",
            "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–Ω–æ—Å–∏—Ç –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—É—á–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–π –ø—Ä–æ–±–ª–µ–º–µ. "
        ]
        
        if section_num == 3:  # –í –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–∞–∑–¥–µ–ª–µ –≥–ª–∞–≤—ã
            content_parts.append(conclusions[chapter_num % len(conclusions)])
        
        content = "".join(content_parts)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
        if "–∏–∏" in topic.lower() or "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" in topic.lower():
            ai_specific = [
                " –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –æ—Å–æ–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—é—Ç –º–µ—Ç–æ–¥—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. ",
                " –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –∫–ª—é—á–µ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –ò–ò. ",
                " –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã. "
            ]
            content += ai_specific[section_num % len(ai_specific)]
        
        return content[:length]
    
    def create_referat(self, topic, pages=10):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ—Ñ–µ—Ä–∞—Ç–∞"""
        content = self.generate_intelligent_content(topic, pages)
        
        return {
            'title': f'–†–ï–§–ï–†–ê–¢\n–ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ: "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏"\n–Ω–∞ —Ç–µ–º—É: "{topic.capitalize()}"',
            'student_info': '–í—ã–ø–æ–ª–Ω–∏–ª: —Å—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã\n–ü—Ä–æ–≤–µ—Ä–∏–ª: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∫–∞—Ñ–µ–¥—Ä—ã',
            'pages': pages,
            'introduction': self._generate_detailed_introduction(topic, pages, content),
            'chapters': content,
            'conclusion': self._generate_detailed_conclusion(topic, content),
            'sources': self._generate_realistic_sources(topic),
            'appendix': self._generate_useful_appendix(topic)
        }
    
    def _generate_detailed_introduction(self, topic, pages, content):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è"""
        chapters_count = len(content)
        sections_count = sum(len(ch['sections']) for ch in content)
        
        return f"""–í–í–ï–î–ï–ù–ò–ï

–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è "{topic}" –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π —Ä–æ–ª—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ. –ò–∑—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏–∫–∏ –∏–º–µ–µ—Ç –≤–∞–∂–Ω–æ–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.

–¶–µ–ª—å —Ä–∞–±–æ—Ç—ã: –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ {topic}, –∞–Ω–∞–ª–∏–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤ —Ä–∞–∑–≤–∏—Ç–∏—è.

–ó–∞–¥–∞—á–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:
1. –ò–∑—É—á–∏—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ {topic}
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —ç—Ç–∞–ø—ã —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
3. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
4. –í—ã—è–≤–∏—Ç—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
5. –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–û–±—ä–µ–º —Ä–∞–±–æ—Ç—ã: {pages} —Å—Ç—Ä–∞–Ω–∏—Ü
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç—ã: –≤–≤–µ–¥–µ–Ω–∏–µ, {chapters_count} –≥–ª–∞–≤—ã, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ, —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è: —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑, —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–±—â–µ–Ω–∏–µ

–†–∞–±–æ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {sections_count} —Ä–∞–∑–¥–µ–ª–æ–≤, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
    
    def _generate_detailed_conclusion(self, topic, content):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è"""
        return f"""–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï

–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ "{topic}" –ø–æ–∑–≤–æ–ª–∏–ª–æ –¥–æ—Å—Ç–∏—á—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–ª–∏ –∏ —Ä–µ—à–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ä–∞–±–æ—Ç—ã. 

–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤—ã–≤–æ–¥—ã:
1. –°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –∏–∑—É—á–µ–Ω–∏—é {topic}
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —ç—Ç–∞–ø—ã —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
3. –í—ã—è–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∏ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
5. –û–±–æ—Å–Ω–æ–≤–∞–Ω—ã –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π

–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–∞—É—á–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞—Ö.

–ù–∞–∏–±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π —è–≤–ª—è—é—Ç—Å—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ {topic} –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π."""
    
    def _generate_realistic_sources(self, topic):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        base_sources = [
            "–¢–∞–Ω–µ–Ω–±–∞—É–º –≠. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã. - –°–ü–±.: –ü–∏—Ç–µ—Ä, 2020. - 1120 —Å.",
            "–ö–æ—Ä–º–µ–Ω –¢., –õ–µ–π–∑–µ—Ä—Å–æ–Ω –ß., –†–∏–≤–µ—Å—Ç –†. –ê–ª–≥–æ—Ä–∏—Ç–º—ã: –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑. - –ú.: –í–∏–ª—å—è–º—Å, 2022. - 1296 —Å.",
            "–†–∞—Å—Å–µ–ª –°., –ù–æ—Ä–≤–∏–≥ –ü. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥. - –ú.: –í–∏–ª—å—è–º—Å, 2021. - 1408 —Å.",
            "–ì—É–¥—Ñ–µ–ª–ª–æ—É –Ø., –ë–µ–Ω–¥–∂–∏–æ –ò., –ö—É—Ä–≤–∏–ª–ª—å –ê. –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ. - –ú.: –î–ú–ö –ü—Ä–µ—Å—Å, 2022. - 652 —Å.",
            "–°—Ç–∏–≤–µ–Ω—Å –†. UNIX: –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. - –ú.: –í–∏–ª—å—è–º—Å, 2019. - 576 —Å."
        ]
        
        topic_specific = {
            "–∏–∏": [
                "–ù–∏–ª—å—Å–æ–Ω –ù. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç. - –ú.: –ú–∏—Ä, 2020. - 420 —Å.",
                "–õ–æ—Ä—å–µ—Ä –ñ.-–õ. –°–∏—Å—Ç–µ–º—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∏. - –ú.: –ú–∏—Ä, 2021. - 568 —Å."
            ],
            "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": [
                "–ú–∞–∫–∫–æ–Ω–Ω–µ–ª–ª –°. –°–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∫–æ–¥. - –ú.: –†—É—Å—Å–∫–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è, 2022. - 896 —Å.",
                "–§–∞—É–ª–µ—Ä –ú. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥. –£–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞. - –ú.: –î–∏–∞–ª–µ–∫—Ç–∏–∫–∞, 2021. - 448 —Å."
            ],
            "—Ñ–∏–∑–∏–∫–∞": [
                "–°–∏–≤—É—Ö–∏–Ω –î.–í. –û–±—â–∏–π –∫—É—Ä—Å —Ñ–∏–∑–∏–∫–∏. - –ú.: –§–∏–∑–º–∞—Ç–ª–∏—Ç, 2020. - 560 —Å.",
                "–õ–∞–Ω–¥–∞—É –õ.–î., –õ–∏—Ñ—à–∏—Ü –ï.–ú. –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–∑–∏–∫–∞. - –ú.: –§–∏–∑–º–∞—Ç–ª–∏—Ç, 2019. - 480 —Å."
            ]
        }
        
        sources = base_sources.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        for key, value in topic_specific.items():
            if key in topic.lower():
                sources.extend(value[:2])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫–∏
        internet_sources = [
            f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞—É—á–Ω–æ–π —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏ Wikipedia - {topic}",
            "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤",
            "–ù–∞—É—á–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ",
            "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π"
        ]
        
        sources.extend(internet_sources)
        return sources[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    
    def _generate_useful_appendix(self, topic):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–µ–∑–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        return f"""–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ê
–î–∏–∞–≥—Ä–∞–º–º—ã –∏ —Å—Ö–µ–º—ã, –∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É—é—â–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ {topic}

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ë
–¢–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –í
–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ì
–ì–ª–æ—Å—Å–∞—Ä–∏–π –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –î
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–∞—Å—á–µ—Ç—ã

–î–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–π –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
    
    def create_word_document(self, referat_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            doc = Document()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
            style = doc.styles['Normal']
            style.font.name = 'Times New Roman'
            style.font.size = Pt(14)
            
            # –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            title = doc.add_heading(referat_data['title'], 0)
            title.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            doc.add_paragraph("\n" * 8)
            student_para = doc.add_paragraph(referat_data['student_info'])
            student_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            doc.add_paragraph("\n" * 6)
            current_year = datetime.datetime.now().year
            date_para = doc.add_paragraph(f"–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n{current_year} –≥–æ–¥")
            date_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            doc.add_page_break()
            
            # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            doc.add_heading('–°–û–î–ï–†–ñ–ê–ù–ò–ï', level=1).alignment = WD_ALIGN_PARAGRAPH.CENTER
            doc.add_paragraph()
            
            # –í–≤–µ–¥–µ–Ω–∏–µ
            doc.add_paragraph("–í–≤–µ–¥–µ–Ω–∏–µ")
            
            # –ì–ª–∞–≤—ã –∏ —Ä–∞–∑–¥–µ–ª—ã
            page_counter = 3  # –í–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            
            for i, chapter in enumerate(referat_data['chapters']):
                doc.add_paragraph(f"–ì–ª–∞–≤–∞ {i+1}. {chapter['title']}")
                for section in chapter['sections']:
                    doc.add_paragraph(f"   {section['title']}")
            
            # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
            doc.add_paragraph("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ")
            doc.add_paragraph("–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            doc.add_paragraph("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            
            doc.add_page_break()
            
            # –í–≤–µ–¥–µ–Ω–∏–µ
            doc.add_heading('–í–í–ï–î–ï–ù–ò–ï', level=1)
            intro_paragraphs = referat_data['introduction'].split('\n\n')
            for paragraph in intro_paragraphs:
                if paragraph.strip():
                    p = doc.add_paragraph(paragraph.strip())
                    p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
                    p.paragraph_format.line_spacing = 1.5
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –≥–ª–∞–≤—ã
            for i, chapter in enumerate(referat_data['chapters']):
                doc.add_page_break()
                doc.add_heading(f'–ì–õ–ê–í–ê {i+1}. {chapter["title"].upper()}', level=1)
                
                for section in chapter['sections']:
                    doc.add_heading(section['title'], level=2)
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã
                    content_paragraphs = section['content'].split('. ')
                    for para_text in content_paragraphs:
                        if para_text.strip():
                            p = doc.add_paragraph(para_text.strip() + '.')
                            p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
                            p.paragraph_format.line_spacing = 1.5
                            p.paragraph_format.space_after = Pt(6)
                    
                    doc.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
            
            # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
            doc.add_page_break()
            doc.add_heading('–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï', level=1)
            conclusion_paragraphs = referat_data['conclusion'].split('\n\n')
            for paragraph in conclusion_paragraphs:
                if paragraph.strip():
                    p = doc.add_paragraph(paragraph.strip())
                    p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
                    p.paragraph_format.line_spacing = 1.5
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
            doc.add_page_break()
            doc.add_heading('–°–ü–ò–°–û–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–• –ò–°–¢–û–ß–ù–ò–ö–û–í', level=1)
            for i, source in enumerate(referat_data['sources'], 1):
                p = doc.add_paragraph(f"{i}. {source}")
                p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
            
            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            doc.add_page_break()
            doc.add_heading('–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø', level=1)
            appendix_paragraphs = referat_data['appendix'].split('\n\n')
            for paragraph in appendix_paragraphs:
                if paragraph.strip():
                    p = doc.add_paragraph(paragraph.strip())
                    p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
            file_stream = io.BytesIO()
            doc.save(file_stream)
            file_stream.seek(0)
            
            return file_stream
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return None
    
    def generate_referat(self, topic, pages=10):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞"""
        try:
            logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞: {topic}, {pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—Ñ–µ—Ä–∞—Ç–∞
            referat_structure = self.create_referat(topic, pages)
            
            if not referat_structure:
                return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—Ñ–µ—Ä–∞—Ç–∞"
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc_file = self.create_word_document(referat_structure)
            
            if not doc_file:
                return None, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            
            chapters_count = len(referat_structure['chapters'])
            sections_count = sum(len(ch['sections']) for ch in referat_structure['chapters'])
            
            success_message = f"""üìö –†–µ—Ñ–µ—Ä–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!

üéØ –¢–µ–º–∞: "{topic}"
üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ –û–±—ä–µ–º: {pages} —Å—Ç—Ä–∞–Ω–∏—Ü
‚Ä¢ –ì–ª–∞–≤: {chapters_count}
‚Ä¢ –†–∞–∑–¥–µ–ª–æ–≤: {sections_count}

‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ –ì–û–°–¢
‚Ä¢ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
‚Ä¢ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏"""
            
            return doc_file, success_message
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞: {e}")
            return None, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞: {str(e)}"

# –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
advanced_referat_generator = AdvancedReferatGenerator()

# === –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ú–û–©–ù–ò–ö ===
class TosikAssistant:
    def __init__(self):
        self.x, self.y, self.z = symbols('x y z')
    
    def solve_math_problem(self, problem):
        """–†–µ—à–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            problem_lower = problem.lower()
            
            if any(word in problem_lower for word in ['—É—Ä–∞–≤–Ω–µ–Ω', 'x¬≤', 'x**2']):
                return self._solve_equation(problem)
            elif any(word in problem_lower for word in ['–ø–ª–æ—â–∞–¥', '–æ–±—ä–µ–º', '–≥–µ–æ–º–µ—Ç—Ä']):
                return self._solve_geometry(problem)
            elif any(word in problem_lower for word in ['–ø—Ä–æ–∏–∑–≤–æ–¥–Ω', '–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü']):
                return self._solve_derivative(problem)
            elif any(word in problem_lower for word in ['–∏–Ω—Ç–µ–≥—Ä–∞–ª']):
                return self._solve_integral(problem)
            else:
                return "ü§î –ù–∞–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É: —É—Ä–∞–≤–Ω–µ–Ω–∏–µ, –ø–ª–æ—â–∞–¥—å, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è, –∏–Ω—Ç–µ–≥—Ä–∞–ª"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è: {str(e)}"
    
    def _solve_equation(self, problem):
        """–†–µ—à–∞–µ—Ç —É—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        try:
            nums = [float(x) for x in re.findall(r'([+-]?\d*\.?\d+)', problem.replace(' ', '')) if x]
            
            if len(nums) >= 3:
                a, b, c = nums[0], nums[1], nums[2]
                D = b**2 - 4*a*c
                
                result = f"üìä –†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è: {a}x¬≤ + {b}x + {c} = 0\n"
                result += f"–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç: D = {b}¬≤ - 4√ó{a}√ó{c} = {D}\n"
                
                if D < 0:
                    result += "‚ùå –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π –Ω–µ—Ç"
                elif D == 0:
                    x = -b / (2*a)
                    result += f"‚úÖ –û–¥–∏–Ω –∫–æ—Ä–µ–Ω—å: x = {x:.2f}"
                else:
                    x1 = (-b + math.sqrt(D)) / (2*a)
                    x2 = (-b - math.sqrt(D)) / (2*a)
                    result += f"‚úÖ –î–≤–∞ –∫–æ—Ä–Ω—è:\n"
                    result += f"x‚ÇÅ = {x1:.2f}\n"
                    result += f"x‚ÇÇ = {x2:.2f}"
                
                return result
                
        except:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ"
    
    def _solve_geometry(self, problem):
        """–†–µ—à–∞–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
        numbers = [float(x) for x in re.findall(r'(\d+\.?\d*)', problem)]
        
        if '–ø–ª–æ—â–∞–¥' in problem.lower() and '–∫—Ä—É–≥' in problem.lower() and numbers:
            r = numbers[0]
            area = math.pi * r**2
            return f"üìê –ü–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞:\nS = œÄr¬≤ = 3.14 √ó {r}¬≤ = {area:.2f}"
        
        elif '–æ–±—ä–µ–º' in problem.lower() and '—Å—Ñ–µ—Ä' in problem.lower() and numbers:
            r = numbers[0]
            volume = (4/3) * math.pi * r**3
            return f"üìê –û–±—ä–µ–º —Å—Ñ–µ—Ä—ã:\nV = 4/3œÄr¬≥ = 4/3 √ó 3.14 √ó {r}¬≥ = {volume:.2f}"
        
        return "ü§î –ù–∞–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É"
    
    def _solve_derivative(self, problem):
        """–†–µ—à–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ"""
        return """
üìö –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–∏:

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
1. (x‚Åø)' = n¬∑x‚Åø‚Åª¬π
2. (sin x)' = cos x  
3. (cos x)' = -sin x
4. (eÀ£)' = eÀ£
5. (ln x)' = 1/x

–ü—Ä–∏–º–µ—Ä:
f(x) = 3x‚Å¥ + 2x¬≤ - 5x + 1
f'(x) = 12x¬≥ + 4x - 5
        """
    
    def _solve_integral(self, problem):
        """–†–µ—à–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã"""
        return """
üìö –ò–Ω—Ç–µ–≥—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏–∏:

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
1. ‚à´x‚Åø dx = x‚Åø‚Å∫¬π/(n+1) + C
2. ‚à´sin x dx = -cos x + C  
3. ‚à´cos x dx = sin x + C
4. ‚à´eÀ£ dx = eÀ£ + C
5. ‚à´1/x dx = ln|x| + C

–ü—Ä–∏–º–µ—Ä:
‚à´(4x¬≥ - 2x + 1) dx = x‚Å¥ - x¬≤ + x + C
        """
    
    def calculate_expression(self, expression):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            expr_clean = expression.replace('^', '**').replace('√ó', '*').replace('√∑', '/')
            result = eval(expr_clean)
            return f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {expression} = {result}"
        except:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"

# –°–æ–∑–¥–∞–µ–º –ø–æ–º–æ—â–Ω–∏–∫–∞ –¢–æ—Å–∏–∫–∞
tosik_assistant = TosikAssistant()

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_db():
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    for week in range(1, 5):
        cursor.execute(f'''
            CREATE TABLE IF NOT EXISTS schedule_week{week} (
                id INTEGER PRIMARY KEY,
                data TEXT NOT NULL,
                last_updated TEXT NOT NULL,
                week_start_date TEXT NOT NULL
            )
        ''')
        cursor.execute(f"INSERT OR IGNORE INTO schedule_week{week} (id, data, last_updated, week_start_date) VALUES (1, '{{}}', '', '')")
    
    # –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reports_system (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            subject_name TEXT NOT NULL UNIQUE,
            report_data TEXT NOT NULL,
            max_reports_per_student INTEGER DEFAULT 1,
            created_by INTEGER NOT NULL,
            created_at TEXT NOT NULL,
            is_active BOOLEAN DEFAULT 1
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS student_registry (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL UNIQUE,
            student_number TEXT NOT NULL,
            student_name TEXT NOT NULL,
            registered_at TEXT NOT NULL
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS report_assignments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            subject_name TEXT NOT NULL,
            report_number INTEGER NOT NULL,
            report_title TEXT NOT NULL,
            assigned_at TEXT NOT NULL
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS admins (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL UNIQUE,
            added_by INTEGER NOT NULL,
            added_at TEXT NOT NULL
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    cursor.execute("SELECT 1 FROM admins WHERE user_id = ?", (CONFIG['admin_id'],))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO admins (user_id, added_by, added_at) VALUES (?, ?, ?)",
            (CONFIG['admin_id'], CONFIG['admin_id'], datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def register_student(user_id, student_number, student_name):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute(
            "INSERT OR REPLACE INTO student_registry (user_id, student_number, student_name, registered_at) VALUES (?, ?, ?, ?)",
            (user_id, student_number, student_name, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
        conn.commit()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False
    finally:
        conn.close()

def get_student_info(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT student_number, student_name FROM student_registry WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    return result if result else None

def create_subject(subject_name, max_reports, created_by):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –¥–æ–∫–ª–∞–¥–æ–≤"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        initial_data = json.dumps({})
        cursor.execute(
            "INSERT INTO reports_system (subject_name, report_data, max_reports_per_student, created_by, created_at) VALUES (?, ?, ?, ?, ?)",
            (subject_name, initial_data, max_reports, created_by, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def add_report_to_subject(subject_name, report_number, report_title):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫–ª–∞–¥–∞ –∫ –ø—Ä–µ–¥–º–µ—Ç—É"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT report_data FROM reports_system WHERE subject_name = ?", (subject_name,))
    result = cursor.fetchone()
    
    if not result:
        conn.close()
        return False
    
    report_data = json.loads(result[0])
    report_data[str(report_number)] = {
        "title": report_title,
        "taken_by": None
    }
    
    cursor.execute(
        "UPDATE reports_system SET report_data = ? WHERE subject_name = ?",
        (json.dumps(report_data), subject_name)
    )
    conn.commit()
    conn.close()
    return True

def take_report_for_student(user_id, subject_name, report_number):
    """–í–∑—è—Ç–∏–µ –¥–æ–∫–ª–∞–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è–ª –ª–∏ —É–∂–µ —Å—Ç—É–¥–µ–Ω—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫–ª–∞–¥–æ–≤
    cursor.execute(
        "SELECT COUNT(*) FROM report_assignments WHERE user_id = ? AND subject_name = ?",
        (user_id, subject_name)
    )
    taken_count = cursor.fetchone()[0]
    
    cursor.execute(
        "SELECT max_reports_per_student FROM reports_system WHERE subject_name = ?",
        (subject_name,)
    )
    max_reports = cursor.fetchone()
    
    if not max_reports:
        conn.close()
        return "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    max_reports = max_reports[0]
    
    if taken_count >= max_reports:
        conn.close()
        return f"‚ùå –í—ã —É–∂–µ –≤–∑—è–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫–ª–∞–¥–æ–≤ ({max_reports}) –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –¥–æ–∫–ª–∞–¥
    cursor.execute("SELECT report_data FROM reports_system WHERE subject_name = ?", (subject_name,))
    result = cursor.fetchone()
    
    if not result:
        conn.close()
        return "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    report_data = json.loads(result[0])
    
    if str(report_number) not in report_data:
        conn.close()
        return "‚ùå –î–æ–∫–ª–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    if report_data[str(report_number)]["taken_by"] is not None:
        conn.close()
        return "‚ùå –≠—Ç–æ—Ç –¥–æ–∫–ª–∞–¥ —É–∂–µ –∑–∞–Ω—è—Ç"
    
    # –ó–∞–Ω–∏–º–∞–µ–º –¥–æ–∫–ª–∞–¥
    report_data[str(report_number)]["taken_by"] = user_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
    student_info = get_student_info(user_id)
    if not student_info:
        conn.close()
        return "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç"
    
    student_number, student_name = student_info
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
    cursor.execute(
        "UPDATE reports_system SET report_data = ? WHERE subject_name = ?",
        (json.dumps(report_data), subject_name)
    )
    
    cursor.execute(
        "INSERT INTO report_assignments (user_id, subject_name, report_number, report_title, assigned_at) VALUES (?, ?, ?, ?, ?)",
        (user_id, subject_name, report_number, report_data[str(report_number)]["title"], datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )
    
    conn.commit()
    conn.close()
    
    return f"‚úÖ –î–æ–∫–ª–∞–¥ '{report_data[str(report_number)]['title']}' —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç!"

def get_subject_reports(subject_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫–ª–∞–¥–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT report_data FROM reports_system WHERE subject_name = ?", (subject_name,))
    result = cursor.fetchone()
    conn.close()
    
    return json.loads(result[0]) if result else None

def get_student_reports(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫–ª–∞–¥–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT subject_name, report_number, report_title, assigned_at FROM report_assignments WHERE user_id = ? ORDER BY assigned_at",
        (user_id,)
    )
    reports = cursor.fetchall()
    conn.close()
    
    return reports

def get_all_subjects():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT subject_name, max_reports_per_student FROM reports_system WHERE is_active = 1")
    subjects = cursor.fetchall()
    conn.close()
    
    return subjects

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute("SELECT 1 FROM admins WHERE user_id = ?", (user_id,))
    result = cursor.fetchone() is not None
    conn.close()
    
    return result

def add_admin(user_id, added_by):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    try:
        cursor.execute(
            "INSERT INTO admins (user_id, added_by, added_at) VALUES (?, ?, ?)",
            (user_id, added_by, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def save_schedule(week_data, week_number=None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if week_number is None:
        week_number = CONFIG['current_week']
    
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute(
        f"UPDATE schedule_week{week_number} SET data = ?, last_updated = ? WHERE id = 1",
        (json.dumps(week_data), datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )
    conn.commit()
    conn.close()

def load_schedule(week_number=None):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if week_number is None:
        week_number = CONFIG['current_week']
    
    conn = sqlite3.connect('schedule.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute(f"SELECT data, last_updated FROM schedule_week{week_number} WHERE id = 1")
    result = cursor.fetchone()
    conn.close()
    
    if result and result[0]:
        return json.loads(result[0]), result[1]
    return {}, ""

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π
days_of_week = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
days_of_week_capitalized = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_schedule_day(schedule_data, day_offset=0):
    if not schedule_data:
        return "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
    
    target_date = datetime.datetime.now() + datetime.timedelta(days=day_offset)
    day_name = days_of_week[target_date.weekday()]
    day_name_cap = days_of_week_capitalized[target_date.weekday()]
    
    response = f"üìÖ {day_name_cap}:\n"
    response += "‚îÄ" * 30 + "\n"
    
    if day_name in schedule_data and schedule_data[day_name]:
        for lesson in schedule_data[day_name]:
            response += f"üïí {lesson['pair']} –ø–∞—Ä–∞\n"
            response += f"üìö {lesson['subject']}\n"
            response += f"üë§ {lesson['teacher']}\n"
            response += f"üö™ {lesson['room']}\n\n"
    else:
        response += "üéâ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
    
    return response

def format_schedule_week(schedule_data, week_offset=0):
    if not schedule_data:
        return "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
    
    response = ""
    today = datetime.datetime.now()
    
    for i, day_name in enumerate(days_of_week):
        day_date = today + datetime.timedelta(days=i - today.weekday() + (week_offset * 7))
        day_name_cap = days_of_week_capitalized[i]
        
        response += f"üìÖ {day_name_cap}:\n"
        response += "‚îÄ" * 30 + "\n"
        
        if day_name in schedule_data and schedule_data[day_name]:
            for lesson in schedule_data[day_name]:
                response += f"üïí {lesson['pair']} –ø–∞—Ä–∞: {lesson['subject']}\n"
        else:
            response += "üéâ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"
        response += "\n"
    
    return response

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(peer_id, message, keyboard=None):
    try:
        params = {
            'peer_id': peer_id,
            'message': message,
            'random_id': get_random_id(),
        }
        if keyboard:
            params['keyboard'] = keyboard.get_keyboard() if hasattr(keyboard, 'get_keyboard') else keyboard
            
        result = vk_session.method('messages.send', params)
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message[:50]}...")
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
def send_document(peer_id, file_stream, filename, message=""):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        print(f"üì§ –¢–æ—Å–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç: {filename}")
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        upload_data = vk_session.method('docs.getMessagesUploadServer', {
            'type': 'doc',
            'peer_id': peer_id
        })
        
        upload_url = upload_data['upload_url']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        files = {'file': (filename, file_stream.getvalue())}
        response = requests.post(upload_url, files=files, timeout=30)
        
        if response.status_code != 200:
            return False
            
        result = response.json()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc_data = vk_session.method('docs.save', {
            'file': result['file'],
            'title': filename
        })
        
        # –ü–æ–ª—É—á–∞–µ–º attachment
        if 'doc' in doc_data:
            doc = doc_data['doc']
            attachment = f"doc{doc['owner_id']}_{doc['id']}"
        else:
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        vk_session.method('messages.send', {
            'peer_id': peer_id,
            'attachment': attachment,
            'message': message,
            'random_id': get_random_id()
        })
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –±–µ—Å–µ–¥
def is_allowed_chat(peer_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ –±–µ—Å–µ–¥–∞"""
    return peer_id in CONFIG['allowed_chats']

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK
try:
    print("üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ VK API...")
    vk_session = vk_api.VkApi(token=CONFIG['token'])
    vk = vk_session.get_api()
    
    group_info = vk.groups.getById(group_id=CONFIG['group_id'])
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥—Ä—É–ø–ø–µ: {group_info[0]['name']}")
    
    longpoll = VkBotLongPoll(vk_session, CONFIG['group_id'])
    print("‚úÖ LongPoll –∑–∞–ø—É—â–µ–Ω")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    exit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
init_db()

print("üéØ –ë–æ—Ç –¢–æ—Å–∏–∫ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
print(f"üìû –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –±–µ—Å–µ–¥—ã: {CONFIG['allowed_chats']}")

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
for event in longpoll.listen():
    try:
        if event.type == VkBotEventType.MESSAGE_NEW:
            msg = event.object.message['text'].strip()
            user_id = event.object.message['from_id']
            peer_id = event.object.message['peer_id']
            original_text = event.object.message['text']
            
            print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ: '{msg}' –æ—Ç {user_id} –≤ {peer_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ –±–µ—Å–µ–¥–∞
            if not is_allowed_chat(peer_id):
                print(f"üö´ –ë–µ—Å–µ–¥–∞ {peer_id} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –¢–æ—Å–∏–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å (—É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)
            if smart_tosik.should_respond(msg, user_id):
                response = smart_tosik.generate_ai_response(msg)
                send_message(peer_id, response)
                continue
            
            if event.from_chat and CONFIG['chat_id'] is None:
                CONFIG['chat_id'] = peer_id
                print(f"üí¨ –ë–µ—Å–µ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {peer_id}")
            
            if event.from_chat:
                msg_lower = msg.lower()
                
                # ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
                
                # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                if msg_lower in ['—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '—Å–µ–≥–æ–¥–Ω—è']:
                    schedule, last_updated = load_schedule()
                    response = format_schedule_day(schedule, 0)
                    if last_updated:
                        response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                    send_message(peer_id, response)
                    continue
                
                elif msg_lower == '–∑–∞–≤—Ç—Ä–∞':
                    schedule, last_updated = load_schedule()
                    response = format_schedule_day(schedule, 1)
                    if last_updated:
                        response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                    send_message(peer_id, response)
                    continue
                
                elif msg_lower == '–Ω–µ–¥–µ–ª—è':
                    schedule, last_updated = load_schedule()
                    response = format_schedule_week(schedule, 0)
                    if last_updated:
                        response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                    send_message(peer_id, response)
                    continue
                
                elif msg_lower == '—Å–ª–µ–¥ –Ω–µ–¥–µ–ª—è':
                    next_week = (CONFIG['current_week'] % 4) + 1
                    schedule, last_updated = load_schedule(next_week)
                    response = f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è\n\n" + format_schedule_week(schedule, 1)
                    if last_updated:
                        response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                    send_message(peer_id, response)
                    continue
                
                # –î–æ–∫–ª–∞–¥—ã
                elif msg_lower == '–¥–æ–∫–ª–∞–¥—ã':
                    subjects = get_all_subjects()
                    if subjects:
                        response = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –¥–æ–∫–ª–∞–¥–æ–≤:\n\n"
                        for subject_name, max_reports in subjects:
                            response += f"üìñ {subject_name} (–º–æ–∂–Ω–æ –≤–∑—è—Ç—å: {max_reports})\n"
                        response += "\nüéØ –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫–ª–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: '–î–æ–∫–ª–∞–¥—ã –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]'\nüìù –ß—Ç–æ–±—ã –≤–∑—è—Ç—å –¥–æ–∫–ª–∞–¥: '–ë–µ—Ä—É –¥–æ–∫–ª–∞–¥ [–Ω–æ–º–µ—Ä] –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]'"
                    else:
                        response = "üìö –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–æ–∫–ª–∞–¥–æ–≤"
                    send_message(peer_id, response)
                    continue
                
                elif msg_lower.startswith('–¥–æ–∫–ª–∞–¥—ã –ø–æ '):
                    subject_name = original_text[11:].strip()
                    reports = get_subject_reports(subject_name)
                    
                    if reports:
                        response = f"üìã –î–æ–∫–ª–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}':\n\n"
                        free_count = 0
                        
                        for report_num, report_info in sorted(reports.items(), key=lambda x: int(x[0])):
                            status = "‚úÖ –°–≤–æ–±–æ–¥–µ–Ω" if not report_info["taken_by"] else f"‚ùå –ó–∞–Ω—è—Ç ({GROUP_LIST.get(str(report_info['taken_by']), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')})"
                            if not report_info["taken_by"]:
                                free_count += 1
                            
                            response += f"üìÑ {report_num}. {report_info['title']} - {status}\n"
                        
                        response += f"\nüéØ –°–≤–æ–±–æ–¥–Ω–æ: {free_count}/{len(reports)}"
                        response += f"\nüìù –í–∑—è—Ç—å: '–ë–µ—Ä—É –¥–æ–∫–ª–∞–¥ [–Ω–æ–º–µ—Ä] –ø–æ {subject_name}'"
                    else:
                        response = f"‚ùå –ù–µ—Ç –¥–æ–∫–ª–∞–¥–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}' –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    send_message(peer_id, response)
                    continue
                
                elif msg_lower.startswith('–±–µ—Ä—É –¥–æ–∫–ª–∞–¥ '):
                    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É "–ë–µ—Ä—É –¥–æ–∫–ª–∞–¥ X –ø–æ Y"
                    parts = original_text.split()
                    if len(parts) >= 5 and parts[2].isdigit() and parts[3] == '–ø–æ':
                        report_number = int(parts[2])
                        subject_name = ' '.join(parts[4:])
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                        student_info = get_student_info(user_id)
                        if not student_info:
                            send_message(peer_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è X' –≥–¥–µ X - –≤–∞—à –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã")
                            continue
                        
                        result = take_report_for_student(user_id, subject_name, report_number)
                        send_message(peer_id, result)
                    else:
                        send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: '–ë–µ—Ä—É –¥–æ–∫–ª–∞–¥ X –ø–æ [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞]'")
                    continue
                
                elif msg_lower == '–º–æ–∏ –¥–æ–∫–ª–∞–¥—ã':
                    student_info = get_student_info(user_id)
                    if not student_info:
                        send_message(peer_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è X' –≥–¥–µ X - –≤–∞—à –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã")
                        continue
                    
                    reports = get_student_reports(user_id)
                    if reports:
                        response = "üìã –í–∞—à–∏ –¥–æ–∫–ª–∞–¥—ã:\n\n"
                        for subject, number, title, date in reports:
                            response += f"üìñ {subject} - –î–æ–∫–ª–∞–¥ {number}: {title}\n"
                            response += f"   üìÖ –í–∑—è—Ç: {date}\n\n"
                    else:
                        response = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∑—è—Ç—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤"
                    send_message(peer_id, response)
                    continue
                
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                elif msg_lower.startswith('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è '):
                    parts = original_text.split()
                    if len(parts) >= 2 and parts[1].isdigit():
                        student_number = parts[1]
                        student_name = GROUP_LIST.get(student_number)
                        
                        if student_name:
                            if register_student(user_id, student_number, student_name):
                                send_message(peer_id, f"‚úÖ {student_name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {student_number}!")
                            else:
                                send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                        else:
                            send_message(peer_id, f"‚ùå –°—Ç—É–¥–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {student_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã")
                    else:
                        send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è X' –≥–¥–µ X - –≤–∞—à –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã")
                    continue
                
                # –ü–æ–º–æ—â—å
                elif msg_lower in ['–ø–æ–º–æ—â—å', '–∫–æ–º–∞–Ω–¥—ã', 'help']:
                    help_text = """
üéØ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:

üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï:
‚Ä¢ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" –∏–ª–∏ "–°–µ–≥–æ–¥–Ω—è" - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ "–ó–∞–≤—Ç—Ä–∞" - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞  
‚Ä¢ "–ù–µ–¥–µ–ª—è" - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
‚Ä¢ "–°–ª–µ–¥ –Ω–µ–¥–µ–ª—è" - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥. –Ω–µ–¥–µ–ª—é

üìö –î–û–ö–õ–ê–î–´:
‚Ä¢ "–î–æ–∫–ª–∞–¥—ã" - —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
‚Ä¢ "–î–æ–∫–ª–∞–¥—ã –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]" - –¥–æ–∫–ª–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
‚Ä¢ "–ë–µ—Ä—É –¥–æ–∫–ª–∞–¥ X –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]" - –≤–∑—è—Ç—å –¥–æ–∫–ª–∞–¥
‚Ä¢ "–ú–æ–∏ –¥–æ–∫–ª–∞–¥—ã" - –≤–∞—à–∏ –¥–æ–∫–ª–∞–¥—ã
‚Ä¢ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è X" - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (X - –≤–∞—à –Ω–æ–º–µ—Ä)

üìù –†–ï–§–ï–†–ê–¢–´:
‚Ä¢ "–†–µ—Ñ–µ—Ä–∞—Ç [—Ç–µ–º–∞]" - —Ä–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ 10 —Å—Ç—Ä–∞–Ω–∏—Ü
‚Ä¢ "–†–µ—Ñ–µ—Ä–∞—Ç [—Ç–µ–º–∞] [N] —Å—Ç—Ä" - —Ä–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ N —Å—Ç—Ä–∞–Ω–∏—Ü

üßÆ –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê:
‚Ä¢ "–†–µ—à–∏ [—É—Ä–∞–≤–Ω–µ–Ω–∏–µ]" - —Ä–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
‚Ä¢ "–ü–æ—Å—á–∏—Ç–∞–π [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ]" - –≤—ã—á–∏—Å–ª–∏—Ç—å

üí¨ –û–ë–©–ï–ù–ò–ï:
‚Ä¢ –û–±—Ä–∞—â–∞–π—Å—è "–¢–æ—Å–∏–∫" –∏ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ "–¢–æ—Å–∏–∫, —à—É—Ç–∫–∞" - —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞
‚Ä¢ "–¢–æ—Å–∏–∫, —Ñ–∞–∫—Ç" - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç

‚öôÔ∏è –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´:
‚Ä¢ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–º–∞–∫—Å]" - –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
‚Ä¢ "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫–ª–∞–¥ [–ø—Ä–µ–¥–º–µ—Ç] [–Ω–æ–º–µ—Ä] [–Ω–∞–∑–≤–∞–Ω–∏–µ]" - –Ω–æ–≤—ã–π –¥–æ–∫–ª–∞–¥
‚Ä¢ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ [ID]" - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å "–¢–æ—Å–∏–∫" - —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!
                    """
                    send_message(peer_id, help_text)
                    continue
                
                # –†–µ—Ñ–µ—Ä–∞—Ç—ã
                elif msg_lower.startswith('—Ä–µ—Ñ–µ—Ä–∞—Ç '):
                    parts = original_text[8:].strip().split()
                    if len(parts) >= 1:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                        if len(parts) >= 3 and parts[-2] in ['—Å—Ç—Ä', '—Å—Ç—Ä–∞–Ω–∏—Ü', '—Å—Ç—Ä–∞–Ω–∏—Ü—ã'] and parts[-1].isdigit():
                            pages = int(parts[-1])
                            topic = ' '.join(parts[:-2])
                        else:
                            pages = 10
                            topic = ' '.join(parts)
                        
                        if len(topic) < 3:
                            send_message(peer_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)")
                            continue
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                        send_message(peer_id, f"üìö –¢–æ—Å–∏–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ –Ω–∞ —Ç–µ–º—É: '{topic}'\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞—Ç
                        doc_file, message = advanced_referat_generator.generate_referat(topic, pages)
                        
                        if doc_file:
                            filename = f"–†–µ—Ñ–µ—Ä–∞—Ç_{topic.replace(' ', '_')}.docx"
                            if send_document(peer_id, doc_file, filename, message):
                                print(f"‚úÖ –†–µ—Ñ–µ—Ä–∞—Ç '{topic}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                            else:
                                send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                        else:
                            send_message(peer_id, message)
                    else:
                        send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: '–†–µ—Ñ–µ—Ä–∞—Ç [—Ç–µ–º–∞]' –∏–ª–∏ '–†–µ—Ñ–µ—Ä–∞—Ç [—Ç–µ–º–∞] [N] —Å—Ç—Ä'")
                    continue
                
                # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
                elif msg_lower.startswith('—Ä–µ—à–∏ '):
                    problem = original_text[5:].strip()
                    if problem:
                        result = tosik_assistant.solve_math_problem(problem)
                        send_message(peer_id, result)
                    else:
                        send_message(peer_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è")
                    continue
                
                elif msg_lower.startswith('–ø–æ—Å—á–∏—Ç–∞–π '):
                    expression = original_text[9:].strip()
                    if expression:
                        result = tosik_assistant.calculate_expression(expression)
                        send_message(peer_id, result)
                    else:
                        send_message(peer_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
                    continue
                
                # ========== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ==========
                if is_admin(user_id):
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                    if msg_lower.startswith('–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç '):
                        parts = original_text[17:].strip().split()
                        if len(parts) >= 2 and parts[-1].isdigit():
                            max_reports = int(parts[-1])
                            subject_name = ' '.join(parts[:-1])
                            
                            if create_subject(subject_name, max_reports, user_id):
                                send_message(peer_id, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –¥–æ–±–∞–≤–ª–µ–Ω (–º–∞–∫—Å. {max_reports} –¥–æ–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞)")
                            else:
                                send_message(peer_id, f"‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç '{subject_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        else:
                            send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–º–∞–∫—Å–∏–º—É–º –¥–æ–∫–ª–∞–¥–æ–≤]'")
                        continue
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫–ª–∞–¥–∞
                    elif msg_lower.startswith('–¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫–ª–∞–¥ '):
                        parts = original_text[16:].strip().split()
                        if len(parts) >= 4 and parts[0].isdigit():
                            report_number = int(parts[0])
                            # –ò—â–µ–º "–ø–æ" –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                            if ' –ø–æ ' in original_text:
                                subject_part = original_text.split(' –ø–æ ', 1)[1]
                                subject_name = subject_part.strip()
                                report_title = ' '.join(parts[1:parts.index('–ø–æ')]) if '–ø–æ' in parts else ' '.join(parts[1:])
                            else:
                                subject_name = parts[-1]
                                report_title = ' '.join(parts[1:-1])
                            
                            if add_report_to_subject(subject_name, report_number, report_title):
                                send_message(peer_id, f"‚úÖ –î–æ–∫–ª–∞–¥ {report_number} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}': {report_title}")
                            else:
                                send_message(peer_id, f"‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç '{subject_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        else:
                            send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫–ª–∞–¥ [–Ω–æ–º–µ—Ä] [–Ω–∞–∑–≤–∞–Ω–∏–µ] –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]'")
                        continue
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                    elif msg_lower.startswith('–¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ '):
                        parts = original_text[16:].strip().split()
                        if parts and parts[0].isdigit():
                            new_admin_id = int(parts[0])
                            if add_admin(new_admin_id, user_id):
                                send_message(peer_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                            else:
                                send_message(peer_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                        else:
                            send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]'")
                        continue
                
                # ========== –ï–°–õ–ò –ù–ò–ß–ï–ì–û –ù–ï –†–ê–°–ü–û–ó–ù–ê–ù–û ==========
                else:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–æ—â—å
                    if len(msg) > 5:
                        help_offer = random.choice([
                            "ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª... –ù–∞–ø–∏—à–∏ '–ü–æ–º–æ—â—å' —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è —É–º–µ—é!",
                            "üéØ –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–î–æ–∫–ª–∞–¥—ã' –∏–ª–∏ '–†–µ—Ñ–µ—Ä–∞—Ç —Ç–µ–º–∞'",
                            "üí° –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏ '–ü–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥!"
                        ])
                        send_message(peer_id, help_offer)
                        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        continue
