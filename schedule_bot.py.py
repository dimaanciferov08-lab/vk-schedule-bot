import vk_api
import json
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import sqlite3
import datetime
import random

# !!! –ó–ê–ü–û–õ–ù–ò –≠–¢–ò –î–ê–ù–ù–´–ï –°–í–û–ò–ú–ò !!!
CONFIG = {
    "group_id": 232761329,
    "token": "vk1.a.Y2xBv4alWQ55rd1IxtkpKc48ibKqpQ1x0Wyc9Hv0z18elxu3JaSBfCi7F5sJ9H4eKy1jg3iqFOjQTkQyCIYdnf77mcezdC__MLiyRi9Xwfus_uLz7UWd9AR8VPQDr7uMEiD1NxadTzqUllP7p4uqWixuefYkm6ryhgMbFLPSo-hnXKyt0XQ4qvpfIG5kLWlJoH7Ivew1yhgiKmtDWhbHYw",
    "admin_id": 238448950,
    "current_week": 1,
    "current_view": "today"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS schedule_week1 (
            id INTEGER PRIMARY KEY,
            data TEXT NOT NULL,
            last_updated TEXT NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS schedule_week2 (
            id INTEGER PRIMARY KEY,
            data TEXT NOT NULL,
            last_updated TEXT NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS polls (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            poll_id TEXT NOT NULL,
            question TEXT NOT NULL,
            options TEXT NOT NULL,
            votes TEXT NOT NULL,
            created_at TEXT NOT NULL,
            created_by INTEGER NOT NULL
        )
    ''')
    cursor.execute("INSERT OR IGNORE INTO schedule_week1 (id, data, last_updated) VALUES (1, '{}', '')")
    cursor.execute("INSERT OR IGNORE INTO schedule_week2 (id, data, last_updated) VALUES (1, '{}', '')")
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –ë–î
def save_schedule(schedule_data):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    table_name = f"schedule_week{CONFIG['current_week']}"
    cursor.execute(f"UPDATE {table_name} SET data = ?, last_updated = ? WHERE id = 1", 
                  (json.dumps(schedule_data, ensure_ascii=False), current_time))
    
    conn.commit()
    conn.close()
    return current_time

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –ë–î
def load_schedule():
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    
    table_name = f"schedule_week{CONFIG['current_week']}"
    cursor.execute(f"SELECT data, last_updated FROM {table_name} WHERE id = 1")
    
    data, last_updated = cursor.fetchone()
    conn.close()
    return json.loads(data), last_updated

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –∏ –¥–Ω–µ–π
months = [
    "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
    "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
]

days_of_week = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—åe"]
days_of_week_capitalized = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—åe"]

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–∞—Ä
time_slots = {
    "1": "09:00‚Äî10:35",
    "2": "10:45‚Äî12:20", 
    "3": "12:40‚Äî14:15",
    "4": "14:45‚Äî16:20",
    "5": "16:30‚Äî18:05",
    "6": "18:15‚Äî19:50"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard():
    keyboard = VkKeyboard(inline=True)
    
    # –ö–Ω–æ–ø–∫–∞ –°–µ–≥–æ–¥–Ω—è
    if CONFIG["current_view"] == "today":
        keyboard.add_button('–°–µ–≥–æ–¥–Ω—è', color=VkKeyboardColor.POSITIVE)
    else:
        keyboard.add_button('–°–µ–≥–æ–¥–Ω—è', color=VkKeyboardColor.SECONDARY)
    
    # –ö–Ω–æ–ø–∫–∏ –ù–µ–¥–µ–ª—è –∏ –°–ª–µ–¥ –Ω–µ–¥–µ–ª—è
    if CONFIG["current_view"] == "week":
        keyboard.add_button('–ù–µ–¥–µ–ª—è', color=VkKeyboardColor.POSITIVE)
    else:
        keyboard.add_button('–ù–µ–¥–µ–ª—è', color=VkKeyboardColor.SECONDARY)
    
    if CONFIG["current_view"] == "next_week":
        keyboard.add_button('–°–ª–µ–¥ –Ω–µ–¥–µ–ª—è', color=VkKeyboardColor.POSITIVE)
    else:
        keyboard.add_button('–°–ª–µ–¥ –Ω–µ–¥–µ–ª—è', color=VkKeyboardColor.SECONDARY)
    
    return keyboard.get_keyboard()

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤
def create_poll_keyboard(poll_type, poll_id=None):
    keyboard = VkKeyboard(inline=True)
    
    if poll_type == "yes_no":
        keyboard.add_button('‚úÖ –î–∞', color=VkKeyboardColor.POSITIVE, payload={'poll_id': poll_id, 'option': 0})
        keyboard.add_button('‚ùå –ù–µ—Ç', color=VkKeyboardColor.NEGATIVE, payload={'poll_id': poll_id, 'option': 1})
    elif poll_type == "go_not_go":
        keyboard.add_button('üéØ –ò–¥—É', color=VkKeyboardColor.POSITIVE, payload={'poll_id': poll_id, 'option': 0})
        keyboard.add_button('üö´ –ù–µ –∏–¥—É', color=VkKeyboardColor.NEGATIVE, payload={'poll_id': poll_id, 'option': 1})
    elif poll_type == "custom":
        keyboard.add_button('–í–∞—Ä–∏–∞–Ω—Ç 1', color=VkKeyboardColor.PRIMARY, payload={'poll_id': poll_id, 'option': 0})
        keyboard.add_button('–í–∞—Ä–∏–∞–Ω—Ç 2', color=VkKeyboardColor.SECONDARY, payload={'poll_id': poll_id, 'option': 1})
    
    keyboard.add_line()
    keyboard.add_button('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã', color=VkKeyboardColor.DEFAULT, payload={'results': poll_id})
    
    return keyboard.get_keyboard()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
def get_date_for_weekday(day_index, week_offset=0):
    today = datetime.datetime.now()
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    monday = today - datetime.timedelta(days=today.weekday())
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –∏ –¥–Ω—è
    target_date = monday + datetime.timedelta(weeks=week_offset, days=day_index)
    return target_date

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
def format_schedule_today(schedule_data, last_updated=""):
    if not schedule_data:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
    
    today = datetime.datetime.now()
    day_name = days_of_week[today.weekday()]
    day_name_cap = days_of_week_capitalized[today.weekday()]
    day_num = today.day
    month_name = months[today.month - 1]
    date_str = f"{day_name_cap}, {day_num} {month_name}"
    
    separator = "¬∑" * 60
    
    response = f"{separator}\n"
    response += f"üìÖ {date_str}\n"
    response += f"{separator}\n\n"
    
    if day_name in schedule_data and schedule_data[day_name]:
        for lesson in schedule_data[day_name]:
            time_range = time_slots.get(lesson['pair'], f"–ü–∞—Ä–∞ {lesson['pair']}")
            response += f"‚è≥ {lesson['pair']} –ø–∞—Ä–∞ ({time_range})\n"
            response += f"üìö –ü—Ä–µ–¥–º–µ—Ç: {lesson['subject']}\n"
            response += f"üè´ –¢–∏–ø: {lesson.get('type', '–ó–∞–Ω—è—Ç–∏–µ')}\n"
            response += f"üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['teacher']}\n"
            response += f"üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['room']}\n\n"
    else:
        response += " –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
    
    if last_updated:
        try:
            update_dt = datetime.datetime.strptime(last_updated, "%Y-%m-%d %H:%M:%S")
            update_str = update_dt.strftime(f"%d {months[update_dt.month - 1]} %Y –≤ %H:%M")
            response += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_str}"
        except:
            response += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
    
    return response

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
def format_schedule_week(schedule_data, last_updated="", week_offset=0):
    if not schedule_data:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
    
    separator = "¬∑" * 60
    response = ""
    
    today = datetime.datetime.now()
    today_name = days_of_week[today.weekday()]
    
    for i, day_name in enumerate(days_of_week):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        day_date = get_date_for_weekday(i, week_offset)
        day_num = day_date.day
        month_name = months[day_date.month - 1]
        day_name_cap = days_of_week_capitalized[i]
        
        response += f"{separator}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–µ–≥–æ–¥–Ω—è –ª–∏ —ç—Ç–æ
        is_today = (week_offset == 0 and day_name == today_name)
        
        if is_today:
            response += f"üéØ {day_name_cap}, {day_num} {month_name} (—Å–µ–≥–æ–¥–Ω—è)\n"
        else:
            response += f"üìÖ {day_name_cap}, {day_num} {month_name}\n"
        
        response += f"{separator}\n\n"
        
        if day_name in schedule_data and schedule_data[day_name]:
            for lesson in schedule_data[day_name]:
                time_range = time_slots.get(lesson['pair'], f"–ü–∞—Ä–∞ {lesson['pair']}")
                response += f"‚è≥ {lesson['pair']} –ø–∞—Ä–∞ ({time_range})\n"
                response += f"üìö –ü—Ä–µ–¥–º–µ—Ç: {lesson['subject']}\n"
                response += f"üè´ –¢–∏–ø: {lesson.get('type', '–ó–∞–Ω—è—Ç–∏–µ')}\n"
                response += f"üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['teacher']}\n"
                response += f"üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['room']}\n\n"
        else:
            response += " –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
    
    if last_updated:
        try:
            update_dt = datetime.datetime.strptime(last_updated, "%Y-%m-%d %H:%M:%S")
            update_str = update_dt.strftime(f"%d {months[update_dt.month - 1]} %Y –≤ %H:%M")
            response += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_str}"
        except:
            response += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
    
    return response

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
def send_message(peer_id, message, keyboard=None):
    try:
        random_id = get_random_id()
        params = {
            'peer_id': peer_id,
            'message': message,
            'random_id': random_id,
        }
        if keyboard:
            params['keyboard'] = keyboard
            
        vk_session.method('messages.send', params)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(user_id):
    return user_id == CONFIG['admin_id']

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
def create_poll(question, options, creator_id):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    
    poll_id = str(random.randint(100000, 999999))
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute(
        "INSERT INTO polls (poll_id, question, options, votes, created_at, created_by) VALUES (?, ?, ?, ?, ?, ?)",
        (poll_id, question, json.dumps(options), json.dumps({}), current_time, creator_id)
    )
    
    conn.commit()
    conn.close()
    return poll_id

# –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –æ–ø—Ä–æ—Å–µ
def vote_in_poll(poll_id, user_id, option_index):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT votes FROM polls WHERE poll_id = ?", (poll_id,))
    result = cursor.fetchone()
    
    if result:
        votes = json.loads(result[0])
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        votes = {k: v for k, v in votes.items() if v != user_id}
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
        votes[str(option_index)] = user_id
        
        cursor.execute("UPDATE polls SET votes = ? WHERE poll_id = ?", (json.dumps(votes), poll_id))
        conn.commit()
    
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞
def get_poll_results(poll_id):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT question, options, votes FROM polls WHERE poll_id = ?", (poll_id,))
    result = cursor.fetchone()
    
    conn.close()
    
    if result:
        question, options_json, votes_json = result
        options = json.loads(options_json)
        votes = json.loads(votes_json)
        
        # –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
        results = {i: 0 for i in range(len(options))}
        for option_index in votes.values():
            results[int(option_index)] += 1
        
        return question, options, results
    return None, None, None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
init_db()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK
vk_session = vk_api.VkApi(token=CONFIG['token'])
longpoll = VkBotLongPoll(vk_session, CONFIG['group_id'])
vk = vk_session.get_api()

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –±–µ—Å–µ–¥—ã
chat_id = None

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
for event in longpoll.listen():
    if event.type == VkBotEventType.MESSAGE_NEW:
        msg = event.object.message['text'].strip().lower()
        user_id = event.object.message['from_id']
        peer_id = event.object.message['peer_id']
        original_text = event.object.message['text']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –±–µ—Å–µ–¥—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if event.from_chat and chat_id is None:
            chat_id = peer_id
            print(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ—Å–µ–¥—É: {chat_id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –±–µ—Å–µ–¥–µ
        if event.from_chat:
            if msg == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' or msg == '—Å–µ–≥–æ–¥–Ω—è':
                CONFIG["current_view"] = "today"
                schedule, last_updated = load_schedule()
                response = format_schedule_today(schedule, last_updated)
                send_message(peer_id, response, create_keyboard())
            
            elif msg == '–Ω–µ–¥–µ–ª—è':
                CONFIG["current_week"] = 1
                CONFIG["current_view"] = "week"
                schedule, last_updated = load_schedule()
                response = format_schedule_week(schedule, last_updated, 0)
                send_message(peer_id, response, create_keyboard())
            
            elif msg == '—Å–ª–µ–¥ –Ω–µ–¥–µ–ª—è':
                CONFIG["current_week"] = 2
                CONFIG["current_view"] = "next_week"
                schedule, last_updated = load_schedule()
                response = format_schedule_week(schedule, last_updated, 1)
                send_message(peer_id, response, create_keyboard())
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
            elif is_admin(user_id):
                if msg.startswith('!–æ–ø—Ä–æ—Å '):
                    question = original_text[7:].strip()
                    if ' –∏–ª–∏ ' in question:
                        options = [opt.strip() for opt in question.split(' –∏–ª–∏ ')]
                        poll_id = create_poll(question, options, user_id)
                        response = f"üìä –û–ü–†–û–°:\n{question}\n\n"
                        for i, option in enumerate(options):
                            response += f"{i+1}. {option}\n"
                        
                        send_message(peer_id, response, create_poll_keyboard("custom", poll_id))
                
                elif msg.startswith('!–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ '):
                    question = original_text[13:].strip()
                    poll_id = create_poll(question, ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], user_id)
                    response = f"üìä –ì–û–õ–û–°–û–í–ê–ù–ò–ï:\n{question}"
                    send_message(peer_id, response, create_poll_keyboard("yes_no", poll_id))
                    
                elif msg.startswith('!–∏–¥—É '):
                    question = original_text[5:].strip()
                    poll_id = create_poll(question, ["üéØ –ò–¥—É", "üö´ –ù–µ –∏–¥—É"], user_id)
                    response = f"üìä –ö–¢–û –ò–î–ï–¢:\n{question}"
                    send_message(peer_id, response, create_poll_keyboard("go_not_go", poll_id))
            
            continue
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø—Ä–æ—Å–æ–≤
        if event.from_chat and 'payload' in event.object.message:
            try:
                payload = json.loads(event.object.message['payload'])
                if 'poll_id' in payload:
                    poll_id = payload['poll_id']
                    option_index = payload['option']
                    
                    vote_in_poll(poll_id, user_id, option_index)
                    send_message(peer_id, "‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!")
                    
                elif 'results' in payload:
                    poll_id = payload['results']
                    question, options, results = get_poll_results(poll_id)
                    
                    if question and results:
                        response = f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–†–û–°–ê:\n{question}\n\n"
                        for i, option in enumerate(options):
                            votes = results.get(i, 0)
                            response += f"{option}: {votes} –≥–æ–ª–æ—Å–æ–≤\n"
                        
                        send_message(peer_id, response)
                    else:
                        send_message(peer_id, "‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
            except json.JSONDecodeError:
                pass
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
        if event.from_user and is_admin(user_id):
            # –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏
            if msg == '!—Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è':
                CONFIG["current_week"] = 2
                send_message(peer_id, "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")
                continue
                
            elif msg == '!—Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è':
                CONFIG["current_week"] = 1
                send_message(peer_id, "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é")
                continue
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            try:
                new_schedule = json.loads(original_text)
                if isinstance(new_schedule, dict):
                    update_time = save_schedule(new_schedule)
                    
                    send_message(peer_id, f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! {update_time}")
                    
                    if chat_id:
                        try:
                            week_status = "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è" if CONFIG["current_week"] == 1 else "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"
                            announcement = f"üéâ –†–ê–°–ü–ò–°–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–û! üéâ\n\n{week_status}\n\n"
                            week_offset = 0 if CONFIG["current_week"] == 1 else 1
                            announcement += format_schedule_week(new_schedule, update_time, week_offset)
                            send_message(chat_id, announcement, create_keyboard())
                        except Exception as e:
                            send_message(peer_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–µ—Å–µ–¥—É: {e}")
                    else:
                        send_message(peer_id, "‚ö†Ô∏è –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ—Å–µ–¥—É –∏–ª–∏ –Ω–µ –∞–¥–º–∏–Ω")
                    
            except json.JSONDecodeError:
                if original_text.lower().startswith('—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:'):
                    notification_text = original_text[12:].strip()
                    if notification_text and chat_id:
                        try:
                            important_msg = "üîî –í–ê–ñ–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï üîî\n\n" + notification_text
                            send_message(chat_id, important_msg)
                            send_message(peer_id, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–µ—Å–µ–¥—É!")
                        except Exception as e:
                            send_message(peer_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
