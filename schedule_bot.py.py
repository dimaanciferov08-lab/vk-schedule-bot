import vk_api
import json
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import sqlite3
import datetime
import random
import requests

# !!! –ó–ê–ü–û–õ–ù–ò –≠–¢–ò –î–ê–ù–ù–´–ï –°–í–û–ò–ú–ò !!!
CONFIG = {
    "group_id": 232761329,
    "token": "vk1.a.Y2xBv4alWQ55rd1IxtkpKc48ibKqpQ1x0Wyc9Hv0z18elxu3JaSBfCi7F5sJ9H4eKy1jg3iqFOjQTkQyCIYdnf77mcezdC__MLiyRi9Xwfus_uLz7UWd9AR8VPQDr7uMEiD1NxadTzqUllP7p4uqWixuefYkm6ryhgMbFLPSo-hnXKyt0XQ4qvpfIG5kLWlJoH7Ivew1yhgiKmtDWhbHYw",
    "admin_id": 238448950,
    "current_week": 1,
    "current_view": "today",
    "locations": {
        "101": {"lat": 59.9343, "lon": 30.3351, "name": "–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å", "address": "—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1"},
        "201": {"lat": 59.9345, "lon": 30.3353, "name": "–í—Ç–æ—Ä–æ–π –∫–æ—Ä–ø—É—Å", "address": "—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 2"},
        "301": {"lat": 59.9347, "lon": 30.3355, "name": "–¢—Ä–µ—Ç–∏–π –∫–æ—Ä–ø—É—Å", "address": "—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 3"},
        "405": {"lat": 59.9349, "lon": 30.3357, "name": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∫–æ—Ä–ø—É—Å", "address": "—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 4"},
        "505": {"lat": 59.9351, "lon": 30.3359, "name": "–ù–∞—É—á–Ω—ã–π –∫–æ—Ä–ø—É—Å", "address": "—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 5"},
        "–∞–∫—Ç–æ–≤—ã–π –∑–∞–ª": {"lat": 59.9344, "lon": 30.3352, "name": "–ê–∫—Ç–æ–≤—ã–π –∑–∞–ª", "address": "—É–ª. –ï–≥–æ—Ä–æ–≤–∞, 15"},
        "—Å–ø–æ—Ä—Ç–∑–∞–ª": {"lat": 59.9346, "lon": 30.3354, "name": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª", "address": "—É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è, 10"},
        "223—Å": {"lat": 59.9350, "lon": 30.3358, "name": "–ö–æ—Ä–ø—É—Å –°", "address": "–°–æ–≤–µ—Ç—Å–∫–∞—è, 14"},
        "14–ª—Ç": {"lat": 59.9352, "lon": 30.3360, "name": "–ö–æ—Ä–ø—É—Å –¢", "address": "–°–æ–≤–µ—Ç—Å–∫–∞—è, 10"},
        "111–ª": {"lat": 59.9348, "lon": 30.3356, "name": "–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∫–æ—Ä–ø—É—Å", "address": "–ø—Ä.–ö–∏—Ä–æ–≤–∞, –¥.1"},
        "107–ª": {"lat": 59.9348, "lon": 30.3356, "name": "–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∫–æ—Ä–ø—É—Å", "address": "–ø—Ä.–ö–∏—Ä–æ–≤–∞, –¥.1"},
        "104–ª": {"lat": 59.9348, "lon": 30.3356, "name": "–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∫–æ—Ä–ø—É—Å", "address": "–ø—Ä.–ö–∏—Ä–æ–≤–∞, –¥.1"},
        "505–ª": {"lat": 59.9348, "lon": 30.3356, "name": "–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∫–æ—Ä–ø—É—Å", "address": "–ø—Ä.–ö–∏—Ä–æ–≤–∞, –¥.1"},
        "406—Å": {"lat": 59.9350, "lon": 30.3358, "name": "–ö–æ—Ä–ø—É—Å –°", "address": "–°–æ–≤–µ—Ç—Å–∫–∞—è, 14"},
        "413b": {"lat": 59.9343, "lon": 30.3352, "name": "–ö–æ—Ä–ø—É—Å B", "address": "–ø—Ä.–ö–∏—Ä–æ–≤–∞,–¥.2"},
        "312b": {"lat": 59.9343, "lon": 30.3352, "name": "–ö–æ—Ä–ø—É—Å B", "address": "–ø—Ä.–ö–∏—Ä–æ–≤–∞,–¥.2"},
        "417b": {"lat": 59.9343, "lon": 30.3352, "name": "–ö–æ—Ä–ø—É—Å B", "address": "–ø—Ä.–ö–∏—Ä–æ–≤–∞,–¥.2"},
        "523—Å": {"lat": 59.9350, "lon": 30.3358, "name": "–ö–æ—Ä–ø—É—Å –°", "address": "–°–æ–≤–µ—Ç—Å–∫–∞—è, 14"},
        "14–∞–ø": {"lat": 59.9352, "lon": 30.3360, "name": "–ö–æ—Ä–ø—É—Å –ü", "address": "–°–æ–≤–µ—Ç—Å–∫–∞—è, 10"},
        "513–ª": {"lat": 59.9348, "lon": 30.3356, "name": "–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∫–æ—Ä–ø—É—Å", "address": "–ø—Ä.–ö–∏—Ä–æ–≤–∞, –¥.1"},
        "–∫—Å–∫": {"lat": 59.9355, "lon": 30.3365, "name": "–ö–æ—Ä–ø—É—Å –ö–°–ö", "address": "–ö–æ–ª—Ö–æ–∑–Ω–∞—è,15"}
    }
}

# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤
faq_database = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 4 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥
    for week in range(1, 5):
        cursor.execute(f'''
            CREATE TABLE IF NOT EXISTS schedule_week{week} (
                id INTEGER PRIMARY KEY,
                data TEXT NOT NULL,
                last_updated TEXT NOT NULL,
                week_start_date TEXT NOT NULL
            )
        ''')
        cursor.execute(f"INSERT OR IGNORE INTO schedule_week{week} (id, data, last_updated, week_start_date) VALUES (1, '{{}}', '', '')")
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS polls (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            poll_id TEXT NOT NULL,
            question TEXT NOT NULL,
            options TEXT NOT NULL,
            votes TEXT NOT NULL,
            created_at TEXT NOT NULL,
            created_by INTEGER NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question TEXT NOT NULL,
            asked_by INTEGER NOT NULL,
            asked_at TEXT NOT NULL,
            answered BOOLEAN DEFAULT 0
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS faq (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            keyword TEXT NOT NULL,
            answer TEXT NOT NULL,
            added_by INTEGER NOT NULL,
            added_at TEXT NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS homework (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            subject TEXT NOT NULL,
            task TEXT NOT NULL,
            added_by INTEGER NOT NULL,
            added_at TEXT NOT NULL,
            deadline TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reports (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            report_number INTEGER NOT NULL,
            subject TEXT NOT NULL,
            taken_by INTEGER NOT NULL,
            taken_at TEXT NOT NULL,
            student_name TEXT
        )
    ''')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º FAQ –∏–∑ –±–∞–∑—ã
    cursor.execute("SELECT keyword, answer FROM faq")
    for keyword, answer in cursor.fetchall():
        faq_database[keyword] = answer
    
    conn.commit()
    conn.close()

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏
def get_current_week_number():
    today = datetime.datetime.now()
    year_start = datetime.datetime(today.year, 9, 1)
    week_num = (today - year_start).days // 7 + 1
    return (week_num % 4) or 4

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –ë–î
def save_schedule(schedule_data, week_number=None):
    if week_number is None:
        week_number = CONFIG['current_week']
    
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    today = datetime.datetime.now()
    monday = today - datetime.timedelta(days=today.weekday())
    week_start = monday.strftime("%Y-%m-%d")
    
    table_name = f"schedule_week{week_number}"
    cursor.execute(f"UPDATE {table_name} SET data = ?, last_updated = ?, week_start_date = ? WHERE id = 1", 
                  (json.dumps(schedule_data, ensure_ascii=False), current_time, week_start))
    
    conn.commit()
    conn.close()
    return current_time

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –ë–î
def load_schedule(week_number=None):
    if week_number is None:
        week_number = CONFIG['current_week']
    
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    
    table_name = f"schedule_week{week_number}"
    cursor.execute(f"SELECT data, last_updated FROM {table_name} WHERE id = 1")
    
    data, last_updated = cursor.fetchone()
    conn.close()
    return json.loads(data), last_updated

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –∏ –¥–Ω–µ–π
months = [
    "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
    "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
]

days_of_week = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—åe"]
days_of_week_capitalized = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—åe"]

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–∞—Ä
time_slots = {
    "1": "09:00‚Äî10:35",
    "2": "10:45‚Äî12:20", 
    "3": "12:40‚Äî14:15",
    "4": "14:45‚Äî16:20",
    "5": "16:30‚Äî18:05",
    "6": "18:15‚Äî19:50"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (3 –∫–Ω–æ–ø–∫–∏)
def create_schedule_keyboard():
    keyboard = VkKeyboard(inline=True)
    
    keyboard.add_button('üìÖ –ó–∞–≤—Ç—Ä–∞', color=VkKeyboardColor.PRIMARY)
    keyboard.add_button('üìã –ù–µ–¥–µ–ª—è', color=VkKeyboardColor.SECONDARY)
    keyboard.add_line()
    keyboard.add_button('üìã –°–ª–µ–¥ –Ω–µ–¥–µ–ª—è', color=VkKeyboardColor.SECONDARY)
    
    return keyboard.get_keyboard()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤
def create_poll_keyboard(poll_type, poll_id=None):
    keyboard = VkKeyboard(inline=True)
    
    if poll_type == "yes_no":
        keyboard.add_button('‚úÖ –î–∞', color=VkKeyboardColor.POSITIVE, payload={'poll_id': poll_id, 'option': 0})
        keyboard.add_button('‚ùå –ù–µ—Ç', color=VkKeyboardColor.NEGATIVE, payload={'poll_id': poll_id, 'option': 1})
    elif poll_type == "go_not_go":
        keyboard.add_button('üéØ –ò–¥—É', color=VkKeyboardColor.POSITIVE, payload={'poll_id': poll_id, 'option': 0})
        keyboard.add_button('üö´ –ù–µ –∏–¥—É', color=VkKeyboardColor.NEGATIVE, payload={'poll_id': poll_id, 'option': 1})
    elif poll_type == "custom":
        keyboard.add_button('–í–∞—Ä–∏–∞–Ω—Ç 1', color=VkKeyboardColor.PRIMARY, payload={'poll_id': poll_id, 'option': 0})
        keyboard.add_button('–í–∞—Ä–∏–∞–Ω—Ç 2', color=VkKeyboardColor.SECONDARY, payload={'poll_id': poll_id, 'option': 1})
    
    keyboard.add_line()
    keyboard.add_button('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã', color=VkKeyboardColor.DEFAULT, payload={'results': poll_id})
    
    return keyboard.get_keyboard()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
def get_date_for_weekday(day_index, week_offset=0):
    today = datetime.datetime.now()
    monday = today - datetime.timedelta(days=today.weekday())
    target_date = monday + datetime.timedelta(weeks=week_offset, days=day_index)
    return target_date

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
def format_schedule_day(schedule_data, day_offset=0):
    if not schedule_data:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
    
    target_date = datetime.datetime.now() + datetime.timedelta(days=day_offset)
    day_name = days_of_week[target_date.weekday()]
    day_name_cap = days_of_week_capitalized[target_date.weekday()]
    day_num = target_date.day
    month_name = months[target_date.month - 1]
    
    separator = "¬∑" * 60
    response = f"{separator}\n"
    
    if day_offset == 0:
        response += f"üéØ {day_name_cap}, {day_num} {month_name} (—Å–µ–≥–æ–¥–Ω—è)\n"
    elif day_offset == 1:
        response += f"üìÖ {day_name_cap}, {day_num} {month_name} (–∑–∞–≤—Ç—Ä–∞)\n"
    else:
        response += f"üìÖ {day_name_cap}, {day_num} {month_name}\n"
    
    response += f"{separator}\n\n"
    
    if day_name in schedule_data and schedule_data[day_name]:
        for lesson in schedule_data[day_name]:
            time_range = time_slots.get(lesson['pair'], f"–ü–∞—Ä–∞ {lesson['pair']}")
            response += f"‚è≥ {lesson['pair']} –ø–∞—Ä–∞ ({time_range})\n"
            response += f"üìö –ü—Ä–µ–¥–º–µ—Ç: {lesson['subject']}\n"
            response += f"üè´ –¢–∏–ø: {lesson.get('type', '–ó–∞–Ω—è—Ç–∏–µ')}\n"
            response += f"üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['teacher']}\n"
            response += f"üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['room']}\n\n"
    else:
        response += " –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
    
    return response

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
def format_schedule_week(schedule_data, week_offset=0):
    if not schedule_data:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
    
    separator = "¬∑" * 60
    response = ""
    
    today = datetime.datetime.now()
    today_name = days_of_week[today.weekday()]
    
    for i, day_name in enumerate(days_of_week):
        day_date = get_date_for_weekday(i, week_offset)
        day_num = day_date.day
        month_name = months[day_date.month - 1]
        day_name_cap = days_of_week_capitalized[i]
        
        response += f"{separator}\n"
        
        is_today = (week_offset == 0 and day_name == today_name)
        is_tomorrow = (week_offset == 0 and i == (today.weekday() + 1) % 7)
        
        if is_today:
            response += f"üéØ {day_name_cap}, {day_num} {month_name} (—Å–µ–≥–æ–¥–Ω—è)\n"
        elif is_tomorrow:
            response += f"üìÖ {day_name_cap}, {day_num} {month_name} (–∑–∞–≤—Ç—Ä–∞)\n"
        else:
            response += f"üìÖ {day_name_cap}, {day_num} {month_name}\n"
        
        response += f"{separator}\n\n"
        
        if day_name in schedule_data and schedule_data[day_name]:
            for lesson in schedule_data[day_name]:
                time_range = time_slots.get(lesson['pair'], f"–ü–∞—Ä–∞ {lesson['pair']}")
                response += f"‚è≥ {lesson['pair']} –ø–∞—Ä–∞ ({time_range})\n"
                response += f"üìö –ü—Ä–µ–¥–º–µ—Ç: {lesson['subject']}\n"
                response += f"üè´ –¢–∏–ø: {lesson.get('type', '–ó–∞–Ω—è—Ç–∏–µ')}\n"
                response += f"üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['teacher']}\n"
                response += f"üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['room']}\n\n"
        else:
            response += " –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
    
    return response

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
def send_message(peer_id, message, keyboard=None):
    try:
        random_id = get_random_id()
        params = {
            'peer_id': peer_id,
            'message': message,
            'random_id': random_id,
        }
        if keyboard:
            params['keyboard'] = keyboard
            
        vk_session.method('messages.send', params)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(user_id):
    return user_id == CONFIG['admin_id']

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
def add_homework(subject, task, user_id, deadline=None):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute(
        "INSERT INTO homework (subject, task, added_by, added_at, deadline) VALUES (?, ?, ?, ?, ?)",
        (subject, task, user_id, current_time, deadline)
    )
    
    conn.commit()
    conn.close()
    return True

def get_homework(subject=None):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    
    if subject:
        cursor.execute("SELECT subject, task, added_at, deadline FROM homework WHERE subject LIKE ? ORDER BY added_at DESC", (f'%{subject}%',))
    else:
        cursor.execute("SELECT subject, task, added_at, deadline FROM homework ORDER BY added_at DESC")
    
    homework = cursor.fetchall()
    conn.close()
    return homework

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–∫–ª–∞–¥–æ–≤
def take_report(report_number, subject, user_id, student_name):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute("SELECT taken_by FROM reports WHERE report_number = ? AND subject = ?", (report_number, subject))
    existing = cursor.fetchone()
    
    if existing:
        conn.close()
        return False, "‚ùå –≠—Ç–æ—Ç –¥–æ–∫–ª–∞–¥ —É–∂–µ –∑–∞–Ω—è—Ç!"
    
    cursor.execute(
        "INSERT INTO reports (report_number, subject, taken_by, taken_at, student_name) VALUES (?, ?, ?, ?, ?)",
        (report_number, subject, user_id, current_time, student_name)
    )
    
    conn.commit()
    conn.close()
    return True, "‚úÖ –î–æ–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –≤–∞–º–∏!"

def get_reports(subject=None):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    
    if subject:
        cursor.execute("SELECT report_number, student_name, taken_at FROM reports WHERE subject = ? ORDER BY report_number", (subject,))
    else:
        cursor.execute("SELECT report_number, subject, student_name, taken_at FROM reports ORDER BY subject, report_number")
    
    reports = cursor.fetchall()
    conn.close()
    return reports

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤
def create_poll(question, options, creator_id):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    
    poll_id = str(random.randint(100000, 999999))
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute(
        "INSERT INTO polls (poll_id, question, options, votes, created_at, created_by) VALUES (?, ?, ?, ?, ?, ?)",
        (poll_id, question, json.dumps(options), json.dumps({}), current_time, creator_id)
    )
    
    conn.commit()
    conn.close()
    return poll_id

def vote_in_poll(poll_id, user_id, option_index):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT votes FROM polls WHERE poll_id = ?", (poll_id,))
    result = cursor.fetchone()
    
    if result:
        votes = json.loads(result[0])
        votes = {k: v for k, v in votes.items() if v != user_id}
        votes[str(option_index)] = user_id
        
        cursor.execute("UPDATE polls SET votes = ? WHERE poll_id = ?", (json.dumps(votes), poll_id))
        conn.commit()
    
    conn.close()

def get_poll_results(poll_id):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT question, options, votes FROM polls WHERE poll_id = ?", (poll_id,))
    result = cursor.fetchone()
    
    conn.close()
    
    if result:
        question, options_json, votes_json = result
        options = json.loads(options_json)
        votes = json.loads(votes_json)
        
        results = {i: 0 for i in range(len(options))}
        for option_index in votes.values():
            results[int(option_index)] += 1
        
        return question, options, results
    return None, None, None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è FAQ
def save_question(question, user_id):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute(
        "INSERT INTO questions (question, asked_by, asked_at) VALUES (?, ?, ?)",
        (question, user_id, current_time)
    )
    
    conn.commit()
    conn.close()

def find_answer(question):
    question_lower = question.lower()
    
    for keyword, answer in faq_database.items():
        if keyword in question_lower:
            return answer
    
    return None

def add_faq(keyword, answer, admin_id):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    cursor.execute(
        "INSERT INTO faq (keyword, answer, added_by, added_at) VALUES (?, ?, ?, ?)",
        (keyword.lower(), answer, admin_id, current_time)
    )
    
    faq_database[keyword.lower()] = answer
    
    conn.commit()
    conn.close()
    return True

def get_all_faq():
    return list(faq_database.items())

def get_unanswered_questions():
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, question, asked_by, asked_at FROM questions WHERE answered = 0 ORDER BY asked_at DESC")
    questions = cursor.fetchall()
    
    conn.close()
    return questions

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç
def get_location_map(room_number):
    room_lower = room_number.lower()
    
    if room_lower in CONFIG['locations']:
        location = CONFIG['locations'][room_lower]
        lat, lon = location['lat'], location['lon']
        return f"üìç {location['name']}\nüö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {room_number}\nüì´ –ê–¥—Ä–µ—Å: {location['address']}\n\nüó∫Ô∏è –ö–∞—Ä—Ç–∞: https://yandex.ru/maps/?pt={lon},{lat}&z=17&l=map"
    
    room_digits = ''.join(filter(str.isdigit, room_number))
    for room_key, location in CONFIG['locations'].items():
        if room_digits in room_key:
            return f"üìç {location['name']}\nüö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {room_number}\nüì´ –ê–¥—Ä–µ—Å: {location['address']}\n\nüó∫Ô∏è –ö–∞—Ä—Ç–∞: https://yandex.ru/maps/?pt={location['lon']},{location['lat']}&z=17&l=map"
    
    return None

def find_room_in_schedule(room_query):
    schedule, _ = load_schedule()
    found_lessons = []
    
    for day_name, lessons in schedule.items():
        if lessons:
            for lesson in lessons:
                if room_query.lower() in lesson['room'].lower():
                    found_lessons.append({
                        'day': day_name,
                        'pair': lesson['pair'],
                        'subject': lesson['subject'],
                        'room': lesson['room'],
                        'time': time_slots.get(lesson['pair'], '')
                    })
    
    return found_lessons

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
init_db()

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
CONFIG['current_week'] = get_current_week_number()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK
vk_session = vk_api.VkApi(token=CONFIG['token'])
longpoll = VkBotLongPoll(vk_session, CONFIG['group_id'])
vk = vk_session.get_api()

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –±–µ—Å–µ–¥—ã
chat_id = None

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
for event in longpoll.listen():
    if event.type == VkBotEventType.MESSAGE_NEW:
        msg = event.object.message['text'].strip().lower()
        user_id = event.object.message['from_id']
        peer_id = event.object.message['peer_id']
        original_text = event.object.message['text']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –±–µ—Å–µ–¥—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if event.from_chat and chat_id is None:
            chat_id = peer_id
            print(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ—Å–µ–¥—É: {chat_id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –±–µ—Å–µ–¥–µ
        if event.from_chat:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if msg == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' or msg == '—Å–µ–≥–æ–¥–Ω—è':
                schedule, last_updated = load_schedule()
                response = format_schedule_day(schedule, 0)
                if last_updated:
                    response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                send_message(peer_id, response, create_schedule_keyboard())
            
            elif msg == '–∑–∞–≤—Ç—Ä–∞':
                schedule, last_updated = load_schedule()
                response = format_schedule_day(schedule, 1)
                if last_updated:
                    response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                send_message(peer_id, response, create_schedule_keyboard())
            
            elif msg == '–Ω–µ–¥–µ–ª—è':
                schedule, last_updated = load_schedule()
                response = format_schedule_week(schedule, 0)
                if last_updated:
                    response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                send_message(peer_id, response, create_schedule_keyboard())
            
            elif msg == '—Å–ª–µ–¥ –Ω–µ–¥–µ–ª—è':
                next_week = (CONFIG['current_week'] % 4) + 1
                schedule, last_updated = load_schedule(next_week)
                response = f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è\n\n" + format_schedule_week(schedule, 1)
                if last_updated:
                    response += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}"
                send_message(peer_id, response, create_schedule_keyboard())
            
            # –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
            elif msg.startswith('–¥–∑ –ø–æ '):
                subject = msg[6:].strip()
                homework_list = get_homework(subject)
                if homework_list:
                    response = f"üìö –î–ó –ø–æ {subject}:\n\n"
                    for hw in homework_list:
                        response += f"üìù {hw[1]}\n"
                        if hw[3]:
                            response += f"‚è∞ –î–æ: {hw[3]}\n"
                        response += f"üïê –î–æ–±–∞–≤–ª–µ–Ω–æ: {hw[2]}\n\n"
                else:
                    response = f"üìö –ü–æ {subject} –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç"
                send_message(peer_id, response)
            
            elif msg == '–≤—Å–µ –¥–∑':
                homework_list = get_homework()
                if homework_list:
                    response = "üìö –í—Å–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
                    for hw in homework_list:
                        response += f"üìñ {hw[0]}: {hw[1]}\n"
                        if hw[3]:
                            response += f"‚è∞ –î–æ: {hw[3]}\n"
                        response += f"üïê {hw[2]}\n\n"
                else:
                    response = "üìö –î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç"
                send_message(peer_id, response)
            
            # –î–æ–∫–ª–∞–¥—ã
            elif msg.startswith('–±–µ—Ä—É –¥–æ–∫–ª–∞–¥ '):
                try:
                    parts = original_text[12:].split(' –ø–æ ')
                    if len(parts) == 2:
                        report_num = int(parts[0].strip())
                        subject = parts[1].strip()
                        success, message = take_report(report_num, subject, user_id, f"@id{user_id}")
                        send_message(peer_id, message)
                    else:
                        send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: –ë–µ—Ä—É –¥–æ–∫–ª–∞–¥ [–Ω–æ–º–µ—Ä] –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]")
                except:
                    send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: –ë–µ—Ä—É –¥–æ–∫–ª–∞–¥ [–Ω–æ–º–µ—Ä] –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]")
            
            elif msg.startswith('–¥–æ–∫–ª–∞–¥—ã –ø–æ '):
                subject = msg[11:].strip()
                reports = get_reports(subject)
                if reports:
                    response = f"üìã –î–æ–∫–ª–∞–¥—ã –ø–æ {subject}:\n\n"
                    for report in reports:
                        response += f"üìÑ –î–æ–∫–ª–∞–¥ {report[0]}: {report[1]}\n"
                    send_message(peer_id, response)
                else:
                    send_message(peer_id, f"üìã –ü–æ {subject} –¥–æ–∫–ª–∞–¥–æ–≤ –Ω–µ—Ç")
            
            # –ü–æ–∏—Å–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
            elif msg.startswith('!–≥–¥–µ '):
                room_query = original_text[5:].strip()
                if room_query:
                    map_info = get_location_map(room_query)
                    if map_info:
                        send_message(peer_id, map_info)
                    else:
                        found_lessons = find_room_in_schedule(room_query)
                        if found_lessons:
                            response = f"üîç –ù–∞–π–¥–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è '{room_query}':\n\n"
                            for lesson in found_lessons:
                                response += f"üìÖ {lesson['day']}, {lesson['pair']} –ø–∞—Ä–∞ ({lesson['time']})\n"
                                response += f"üìö {lesson['subject']}\n"
                                response += f"üö™ {lesson['room']}\n\n"
                            send_message(peer_id, response)
                        else:
                            send_message(peer_id, f"‚ùå –ê—É–¥–∏—Ç–æ—Ä–∏—è '{room_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    send_message(peer_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ !–≥–¥–µ")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            elif msg == '!–∞—É–¥–∏—Ç–æ—Ä–∏–∏':
                response = "üó∫Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:\n\n"
                for room, info in CONFIG['locations'].items():
                    response += f"üö™ {room} - {info['name']}\n"
                response += "\nüîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: !–≥–¥–µ [–Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏]"
                send_message(peer_id, response)

            # –ü–æ–∏—Å–∫ –≥–¥–µ —Å–µ–π—á–∞—Å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–∞—Ä–∞
            elif msg == '!–≥–¥–µ —è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å':
                today = datetime.datetime.now()
                day_name = days_of_week[today.weekday()]
                schedule, _ = load_schedule()
                
                if day_name in schedule and schedule[day_name]:
                    current_time = today.strftime("%H:%M")
                    current_lesson = None
                    
                    for lesson in schedule[day_name]:
                        time_range = time_slots.get(lesson['pair'], '')
                        if time_range:
                            start_time = time_range.split('‚Äî')[0]
                            if current_time >= start_time:
                                current_lesson = lesson
                    
                    if current_lesson:
                        room = current_lesson['room']
                        map_info = get_location_map(room)
                        if map_info:
                            response = f"üéØ –°–µ–π—á–∞—Å —É –≤–∞—Å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:\n"
                            response += f"üìö {current_lesson['subject']}\n"
                            response += f"üë§ {current_lesson['teacher']}\n\n"
                            response += map_info
                            send_message(peer_id, response)
                        else:
                            send_message(peer_id, f"üìö –°–µ–π—á–∞—Å: {current_lesson['subject']} –≤ {room}")
                    else:
                        send_message(peer_id, "‚úÖ –°–µ–π—á–∞—Å –ø–∞—Ä –Ω–µ—Ç, –º–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å!")
                else:
                    send_message(peer_id, "üìÖ –°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            elif msg.startswith('!–≤–æ–ø—Ä–æ—Å '):
                question = original_text[8:].strip()
                if question:
                    save_question(question, user_id)
                    
                    answer = find_answer(question)
                    if answer:
                        send_message(peer_id, f"ü§ñ {answer}")
                    else:
                        send_message(peer_id, "‚ùå –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!")
                        
                        if CONFIG['admin_id']:
                            admin_msg = f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @id{user_id}:\n{question}"
                            send_message(CONFIG['admin_id'], admin_msg)
                else:
                    send_message(peer_id, "‚ùå –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã !–≤–æ–ø—Ä–æ—Å")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
            elif is_admin(user_id):
                if msg.startswith('!–æ–ø—Ä–æ—Å '):
                    question = original_text[7:].strip()
                    if ' –∏–ª–∏ ' in question:
                        options = [opt.strip() for opt in question.split(' –∏–ª–∏ ')]
                        poll_id = create_poll(question, options, user_id)
                        response = f"üìä –û–ü–†–û–°:\n{question}\n\n"
                        for i, option in enumerate(options):
                            response += f"{i+1}. {option}\n"
                        
                        send_message(peer_id, response, create_poll_keyboard("custom", poll_id))
                
                elif msg.startswith('!–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ '):
                    question = original_text[13:].strip()
                    poll_id = create_poll(question, ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], user_id)
                    response = f"üìä –ì–û–õ–û–°–û–í–ê–ù–ò–ï:\n{question}"
                    send_message(peer_id, response, create_poll_keyboard("yes_no", poll_id))
                    
                elif msg.startswith('!–∏–¥—É '):
                    question = original_text[5:].strip()
                    poll_id = create_poll(question, ["üéØ –ò–¥—É", "üö´ –ù–µ –∏–¥—É"], user_id)
                    response = f"üìä –ö–¢–û –ò–î–ï–¢:\n{question}"
                    send_message(peer_id, response, create_poll_keyboard("go_not_go", poll_id))
            
            continue
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø—Ä–æ—Å–æ–≤
        if event.from_chat and 'payload' in event.object.message:
            try:
                payload = json.loads(event.object.message['payload'])
                if 'poll_id' in payload:
                    poll_id = payload['poll_id']
                    option_index = payload['option']
                    
                    vote_in_poll(poll_id, user_id, option_index)
                    send_message(peer_id, "‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!")
                    
                elif 'results' in payload:
                    poll_id = payload['results']
                    question, options, results = get_poll_results(poll_id)
                    
                    if question and results:
                        response = f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–†–û–°–ê:\n{question}\n\n"
                        for i, option in enumerate(options):
                            votes = results.get(i, 0)
                            response += f"{option}: {votes} –≥–æ–ª–æ—Å–æ–≤\n"
                        
                        send_message(peer_id, response)
                    else:
                        send_message(peer_id, "‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
            except json.JSONDecodeError:
                pass
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
        if event.from_user and is_admin(user_id):
            # –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏
            if msg == '!—Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è':
                CONFIG["current_week"] = 2
                send_message(peer_id, "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")
                continue
                
            elif msg == '!—Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è':
                CONFIG["current_week"] = 1
                send_message(peer_id, "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é")
                continue
            
            # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FAQ
            elif msg.startswith('!–¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å '):
                parts = original_text[17:].split(' –æ—Ç–≤–µ—Ç ')
                if len(parts) == 2:
                    keyword = parts[0].strip().lower()
                    answer = parts[1].strip()
                    if add_faq(keyword, answer, user_id):
                        send_message(peer_id, f"‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω:\n–ö–ª—é—á: {keyword}\n–û—Ç–≤–µ—Ç: {answer}")
                    else:
                        send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞")
                else:
                    send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: !–¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å [–∫–ª—é—á] –æ—Ç–≤–µ—Ç [–æ—Ç–≤–µ—Ç]")
            
            elif msg == '!–≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã':
                faq_list = get_all_faq()
                if faq_list:
                    response = "üìã –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã-–æ—Ç–≤–µ—Ç—ã:\n\n"
                    for i, (keyword, answer) in enumerate(faq_list, 1):
                        response += f"{i}. {keyword} ‚Üí {answer}\n"
                    send_message(peer_id, response)
                else:
                    send_message(peer_id, "‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
            
            elif msg == '!–Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ':
                questions = get_unanswered_questions()
                if questions:
                    response = "üìã –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
                    for i, (q_id, question, user_id, asked_at) in enumerate(questions, 1):
                        response += f"{i}. {question}\n   üë§ @id{user_id} –≤ {asked_at}\n\n"
                    send_message(peer_id, response)
                else:
                    send_message(peer_id, "‚úÖ –ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
            
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
            elif msg.startswith('!–¥–æ–±–∞–≤–∏—Ç—å –¥–∑ '):
                try:
                    parts = original_text[13:].split(' –ø–æ ')
                    if len(parts) == 2:
                        task = parts[0].strip()
                        subject = parts[1].strip()
                        if add_homework(subject, task, user_id):
                            send_message(peer_id, f"‚úÖ –î–ó –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–ó–∞–¥–∞–Ω–∏–µ: {task}")
                        else:
                            send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–ó")
                    else:
                        send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: !–¥–æ–±–∞–≤–∏—Ç—å –¥–∑ [–∑–∞–¥–∞–Ω–∏–µ] –ø–æ [–ø—Ä–µ–¥–º–µ—Ç]")
                except:
                    send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –∫–∞—Ä—Ç—É
            elif msg.startswith('!–¥–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é '):
                try:
                    parts = original_text[20:].split(';')
                    if len(parts) == 5:
                        room = parts[0].strip().lower()
                        name = parts[1].strip()
                        address = parts[2].strip()
                        lat = float(parts[3].strip())
                        lon = float(parts[4].strip())
                        
                        CONFIG['locations'][room] = {
                            'name': name,
                            'address': address,
                            'lat': lat,
                            'lon': lon
                        }
                        
                        send_message(peer_id, f"‚úÖ –ê—É–¥–∏—Ç–æ—Ä–∏—è {room} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç—É!")
                    else:
                        send_message(peer_id, "‚ùå –§–æ—Ä–º–∞—Ç: !–¥–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é –Ω–æ–º–µ—Ä;–Ω–∞–∑–≤–∞–Ω–∏–µ;–∞–¥—Ä–µ—Å;—à–∏—Ä–æ—Ç–∞;–¥–æ–ª–≥–æ—Ç–∞")
                except:
                    send_message(peer_id, "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            try:
                new_schedule = json.loads(original_text)
                if isinstance(new_schedule, dict):
                    update_time = save_schedule(new_schedule)
                    
                    send_message(peer_id, f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! {update_time}")
                    
                    if chat_id:
                        try:
                            week_status = "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è" if CONFIG["current_week"] == 1 else "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"
                            announcement = f"üéâ –†–ê–°–ü–ò–°–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–û! üéâ\n\n{week_status}\n\n"
                            week_offset = 0 if CONFIG["current_week"] == 1 else 1
                            announcement += format_schedule_week(new_schedule, update_time, week_offset)
                            send_message(chat_id, announcement, create_schedule_keyboard())
                        except Exception as e:
                            send_message(peer_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–µ—Å–µ–¥—É: {e}")
                    else:
                        send_message(peer_id, "‚ö†Ô∏è –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ—Å–µ–¥—É –∏–ª–∏ –Ω–µ –∞–¥–º–∏–Ω")
                    
            except json.JSONDecodeError:
                if original_text.lower().startswith('—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:'):
                    notification_text = original_text[12:].strip()
                    if notification_text and chat_id:
                        try:
                            important_msg = "üîî –í–ê–ñ–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï üîî\n\n" + notification_text
                            send_message(chat_id, important_msg)
                            send_message(peer_id, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–µ—Å–µ–¥—É!")
                        except Exception as e:
                            send_message(peer_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
